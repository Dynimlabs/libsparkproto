// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libsparkproto/parameters.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libsparkproto/parameters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace libspark {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* ParameterInfoBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterInfoBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParameterInfoInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterInfoInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParameterInfoDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterInfoDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParameterInfoString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterInfoString_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParameterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParameterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ParameterResponse_ResponseCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ParameterFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ParameterType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_libsparkproto_2fparameters_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_libsparkproto_2fparameters_2eproto() {
  protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libsparkproto/parameters.proto");
  GOOGLE_CHECK(file != NULL);
  ParameterInfoBool_descriptor_ = file->message_type(0);
  static const int ParameterInfoBool_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoBool, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoBool, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoBool, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoBool, flags_),
  };
  ParameterInfoBool_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParameterInfoBool_descriptor_,
      ParameterInfoBool::default_instance_,
      ParameterInfoBool_offsets_,
      -1,
      -1,
      -1,
      sizeof(ParameterInfoBool),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoBool, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoBool, _is_default_instance_));
  ParameterInfoInt_descriptor_ = file->message_type(1);
  static const int ParameterInfoInt_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoInt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoInt, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoInt, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoInt, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoInt, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoInt, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoInt, flags_),
  };
  ParameterInfoInt_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParameterInfoInt_descriptor_,
      ParameterInfoInt::default_instance_,
      ParameterInfoInt_offsets_,
      -1,
      -1,
      -1,
      sizeof(ParameterInfoInt),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoInt, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoInt, _is_default_instance_));
  ParameterInfoDouble_descriptor_ = file->message_type(2);
  static const int ParameterInfoDouble_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoDouble, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoDouble, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoDouble, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoDouble, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoDouble, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoDouble, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoDouble, flags_),
  };
  ParameterInfoDouble_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParameterInfoDouble_descriptor_,
      ParameterInfoDouble::default_instance_,
      ParameterInfoDouble_offsets_,
      -1,
      -1,
      -1,
      sizeof(ParameterInfoDouble),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoDouble, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoDouble, _is_default_instance_));
  ParameterInfoString_descriptor_ = file->message_type(3);
  static const int ParameterInfoString_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoString, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoString, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoString, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoString, flags_),
  };
  ParameterInfoString_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParameterInfoString_descriptor_,
      ParameterInfoString::default_instance_,
      ParameterInfoString_offsets_,
      -1,
      -1,
      -1,
      sizeof(ParameterInfoString),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoString, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInfoString, _is_default_instance_));
  ParameterRequest_descriptor_ = file->message_type(4);
  static const int ParameterRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterRequest, paramtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterRequest, paramid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterRequest, paramsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterRequest, paraminfo_),
  };
  ParameterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParameterRequest_descriptor_,
      ParameterRequest::default_instance_,
      ParameterRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ParameterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterRequest, _is_default_instance_));
  ParameterResponse_descriptor_ = file->message_type(5);
  static const int ParameterResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterResponse, paramtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterResponse, paramsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterResponse, paraminfo_),
  };
  ParameterResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParameterResponse_descriptor_,
      ParameterResponse::default_instance_,
      ParameterResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ParameterResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterResponse, _is_default_instance_));
  ParameterResponse_ResponseCode_descriptor_ = ParameterResponse_descriptor_->enum_type(0);
  ParameterFlag_descriptor_ = file->enum_type(0);
  ParameterType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libsparkproto_2fparameters_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParameterInfoBool_descriptor_, &ParameterInfoBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParameterInfoInt_descriptor_, &ParameterInfoInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParameterInfoDouble_descriptor_, &ParameterInfoDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParameterInfoString_descriptor_, &ParameterInfoString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParameterRequest_descriptor_, &ParameterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParameterResponse_descriptor_, &ParameterResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_libsparkproto_2fparameters_2eproto() {
  delete ParameterInfoBool::default_instance_;
  delete ParameterInfoBool_reflection_;
  delete ParameterInfoInt::default_instance_;
  delete ParameterInfoInt_reflection_;
  delete ParameterInfoDouble::default_instance_;
  delete ParameterInfoDouble_reflection_;
  delete ParameterInfoString::default_instance_;
  delete ParameterInfoString_reflection_;
  delete ParameterRequest::default_instance_;
  delete ParameterRequest_reflection_;
  delete ParameterResponse::default_instance_;
  delete ParameterResponse_reflection_;
}

void protobuf_AddDesc_libsparkproto_2fparameters_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_libsparkproto_2fparameters_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::libspark::protocol::protobuf_AddDesc_libsparkproto_2fparameterids_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036libsparkproto/parameters.proto\022\021libspa"
    "rk.protocol\032 libsparkproto/parameterids."
    "proto\"\215\001\n\021ParameterInfoBool\022*\n\002id\030\001 \001(\0162"
    "\036.libspark.protocol.ParameterID\022\014\n\004name\030"
    "\002 \001(\t\022\r\n\005value\030\003 \001(\010\022/\n\005flags\030\007 \001(\0162 .li"
    "bspark.protocol.ParameterFlag\"\264\001\n\020Parame"
    "terInfoInt\022*\n\002id\030\001 \001(\0162\036.libspark.protoc"
    "ol.ParameterID\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 "
    "\001(\005\022\013\n\003min\030\004 \001(\005\022\013\n\003max\030\005 \001(\005\022\014\n\004step\030\006 "
    "\001(\005\022/\n\005flags\030\007 \001(\0162 .libspark.protocol.P"
    "arameterFlag\"\267\001\n\023ParameterInfoDouble\022*\n\002"
    "id\030\001 \001(\0162\036.libspark.protocol.ParameterID"
    "\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\005\022\013\n\003min\030\004 \001"
    "(\005\022\013\n\003max\030\005 \001(\005\022\014\n\004step\030\006 \001(\005\022/\n\005flags\030\007"
    " \001(\0162 .libspark.protocol.ParameterFlag\"\217"
    "\001\n\023ParameterInfoString\022*\n\002id\030\001 \001(\0162\036.lib"
    "spark.protocol.ParameterID\022\014\n\004name\030\002 \001(\t"
    "\022\r\n\005value\030\003 \001(\t\022/\n\005flags\030\007 \001(\0162 .libspar"
    "k.protocol.ParameterFlag\"\236\001\n\020ParameterRe"
    "quest\0223\n\tparamType\030\001 \001(\0162 .libspark.prot"
    "ocol.ParameterType\022/\n\007paramID\030\002 \001(\0162\036.li"
    "bspark.protocol.ParameterID\022\021\n\tparamSize"
    "\030\003 \001(\005\022\021\n\tparamInfo\030\004 \001(\014\"\214\002\n\021ParameterR"
    "esponse\022\?\n\004code\030\001 \001(\01621.libspark.protoco"
    "l.ParameterResponse.ResponseCode\022\017\n\007mess"
    "age\030\002 \001(\t\0223\n\tparamType\030\003 \001(\0162 .libspark."
    "protocol.ParameterType\022\021\n\tparamSize\030\004 \001("
    "\005\022\021\n\tparamInfo\030\005 \001(\014\"J\n\014ResponseCode\022\023\n\017"
    "RESPONSE_UNKNOW\020\000\022\017\n\013RESPONSE_OK\020\001\022\024\n\020RE"
    "SPONSE_FAILURE\020\002*@\n\rParameterFlag\022\027\n\023PAR"
    "AMETER_WRITEABLE\020\000\022\026\n\022PARAMETER_READONLY"
    "\020\001*\242\002\n\rParameterType\022\032\n\026PARAMETER_UNKNOW"
    "N_TYPE\020\000\022\032\n\026PARAMETER_READ_BOOLEAN\020\001\022\033\n\027"
    "PARAMETER_WRITE_BOOLEAN\020\002\022\026\n\022PARAMETER_R"
    "EAD_INT\020\003\022\027\n\023PARAMETER_WRITE_INT\020\004\022\031\n\025PA"
    "RAMETER_READ_DOUBLE\020\005\022\032\n\026PARAMETER_WRITE"
    "_DOUBLE\020\006\022\031\n\025PARAMETER_READ_STRING\020\007\022\032\n\026"
    "PARAMETER_WRITE_STRING\020\010\022\035\n\031PARAMETER_RE"
    "AD_DEVICEINFO\020\tB\002H\001b\006proto3", 1547);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libsparkproto/parameters.proto", &protobuf_RegisterTypes);
  ParameterInfoBool::default_instance_ = new ParameterInfoBool();
  ParameterInfoInt::default_instance_ = new ParameterInfoInt();
  ParameterInfoDouble::default_instance_ = new ParameterInfoDouble();
  ParameterInfoString::default_instance_ = new ParameterInfoString();
  ParameterRequest::default_instance_ = new ParameterRequest();
  ParameterResponse::default_instance_ = new ParameterResponse();
  ParameterInfoBool::default_instance_->InitAsDefaultInstance();
  ParameterInfoInt::default_instance_->InitAsDefaultInstance();
  ParameterInfoDouble::default_instance_->InitAsDefaultInstance();
  ParameterInfoString::default_instance_->InitAsDefaultInstance();
  ParameterRequest::default_instance_->InitAsDefaultInstance();
  ParameterResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libsparkproto_2fparameters_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libsparkproto_2fparameters_2eproto {
  StaticDescriptorInitializer_libsparkproto_2fparameters_2eproto() {
    protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  }
} static_descriptor_initializer_libsparkproto_2fparameters_2eproto_;
const ::google::protobuf::EnumDescriptor* ParameterFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterFlag_descriptor_;
}
bool ParameterFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ParameterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterType_descriptor_;
}
bool ParameterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParameterInfoBool::kIdFieldNumber;
const int ParameterInfoBool::kNameFieldNumber;
const int ParameterInfoBool::kValueFieldNumber;
const int ParameterInfoBool::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParameterInfoBool::ParameterInfoBool()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libspark.protocol.ParameterInfoBool)
}

void ParameterInfoBool::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ParameterInfoBool::ParameterInfoBool(const ParameterInfoBool& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libspark.protocol.ParameterInfoBool)
}

void ParameterInfoBool::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = false;
  flags_ = 0;
}

ParameterInfoBool::~ParameterInfoBool() {
  // @@protoc_insertion_point(destructor:libspark.protocol.ParameterInfoBool)
  SharedDtor();
}

void ParameterInfoBool::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ParameterInfoBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterInfoBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterInfoBool_descriptor_;
}

const ParameterInfoBool& ParameterInfoBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  return *default_instance_;
}

ParameterInfoBool* ParameterInfoBool::default_instance_ = NULL;

ParameterInfoBool* ParameterInfoBool::New(::google::protobuf::Arena* arena) const {
  ParameterInfoBool* n = new ParameterInfoBool;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParameterInfoBool::Clear() {
// @@protoc_insertion_point(message_clear_start:libspark.protocol.ParameterInfoBool)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ParameterInfoBool, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ParameterInfoBool*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, flags_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ParameterInfoBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libspark.protocol.ParameterInfoBool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .libspark.protocol.ParameterID id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::libspark::protocol::ParameterID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.ParameterInfoBool.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional bool value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional .libspark.protocol.ParameterFlag flags = 7;
      case 7: {
        if (tag == 56) {
         parse_flags:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flags(static_cast< ::libspark::protocol::ParameterFlag >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libspark.protocol.ParameterInfoBool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libspark.protocol.ParameterInfoBool)
  return false;
#undef DO_
}

void ParameterInfoBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libspark.protocol.ParameterInfoBool)
  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterInfoBool.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->value(), output);
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:libspark.protocol.ParameterInfoBool)
}

::google::protobuf::uint8* ParameterInfoBool::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libspark.protocol.ParameterInfoBool)
  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterInfoBool.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->value(), target);
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->flags(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libspark.protocol.ParameterInfoBool)
  return target;
}

int ParameterInfoBool::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:libspark.protocol.ParameterInfoBool)
  int total_size = 0;

  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bool value = 3;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flags());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterInfoBool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libspark.protocol.ParameterInfoBool)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ParameterInfoBool* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParameterInfoBool>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libspark.protocol.ParameterInfoBool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libspark.protocol.ParameterInfoBool)
    MergeFrom(*source);
  }
}

void ParameterInfoBool::MergeFrom(const ParameterInfoBool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libspark.protocol.ParameterInfoBool)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void ParameterInfoBool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libspark.protocol.ParameterInfoBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterInfoBool::CopyFrom(const ParameterInfoBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libspark.protocol.ParameterInfoBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterInfoBool::IsInitialized() const {

  return true;
}

void ParameterInfoBool::Swap(ParameterInfoBool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParameterInfoBool::InternalSwap(ParameterInfoBool* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParameterInfoBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterInfoBool_descriptor_;
  metadata.reflection = ParameterInfoBool_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParameterInfoBool

// optional .libspark.protocol.ParameterID id = 1;
void ParameterInfoBool::clear_id() {
  id_ = 0;
}
 ::libspark::protocol::ParameterID ParameterInfoBool::id() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoBool.id)
  return static_cast< ::libspark::protocol::ParameterID >(id_);
}
 void ParameterInfoBool::set_id(::libspark::protocol::ParameterID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoBool.id)
}

// optional string name = 2;
void ParameterInfoBool::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ParameterInfoBool::name() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoBool.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterInfoBool::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoBool.name)
}
 void ParameterInfoBool::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterInfoBool.name)
}
 void ParameterInfoBool::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterInfoBool.name)
}
 ::std::string* ParameterInfoBool::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterInfoBool.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParameterInfoBool::release_name() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterInfoBool.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterInfoBool::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterInfoBool.name)
}

// optional bool value = 3;
void ParameterInfoBool::clear_value() {
  value_ = false;
}
 bool ParameterInfoBool::value() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoBool.value)
  return value_;
}
 void ParameterInfoBool::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoBool.value)
}

// optional .libspark.protocol.ParameterFlag flags = 7;
void ParameterInfoBool::clear_flags() {
  flags_ = 0;
}
 ::libspark::protocol::ParameterFlag ParameterInfoBool::flags() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoBool.flags)
  return static_cast< ::libspark::protocol::ParameterFlag >(flags_);
}
 void ParameterInfoBool::set_flags(::libspark::protocol::ParameterFlag value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoBool.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParameterInfoInt::kIdFieldNumber;
const int ParameterInfoInt::kNameFieldNumber;
const int ParameterInfoInt::kValueFieldNumber;
const int ParameterInfoInt::kMinFieldNumber;
const int ParameterInfoInt::kMaxFieldNumber;
const int ParameterInfoInt::kStepFieldNumber;
const int ParameterInfoInt::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParameterInfoInt::ParameterInfoInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libspark.protocol.ParameterInfoInt)
}

void ParameterInfoInt::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ParameterInfoInt::ParameterInfoInt(const ParameterInfoInt& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libspark.protocol.ParameterInfoInt)
}

void ParameterInfoInt::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  min_ = 0;
  max_ = 0;
  step_ = 0;
  flags_ = 0;
}

ParameterInfoInt::~ParameterInfoInt() {
  // @@protoc_insertion_point(destructor:libspark.protocol.ParameterInfoInt)
  SharedDtor();
}

void ParameterInfoInt::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ParameterInfoInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterInfoInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterInfoInt_descriptor_;
}

const ParameterInfoInt& ParameterInfoInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  return *default_instance_;
}

ParameterInfoInt* ParameterInfoInt::default_instance_ = NULL;

ParameterInfoInt* ParameterInfoInt::New(::google::protobuf::Arena* arena) const {
  ParameterInfoInt* n = new ParameterInfoInt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParameterInfoInt::Clear() {
// @@protoc_insertion_point(message_clear_start:libspark.protocol.ParameterInfoInt)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ParameterInfoInt, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ParameterInfoInt*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, flags_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ParameterInfoInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libspark.protocol.ParameterInfoInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .libspark.protocol.ParameterID id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::libspark::protocol::ParameterID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.ParameterInfoInt.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min;
        break;
      }

      // optional int32 min = 4;
      case 4: {
        if (tag == 32) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max;
        break;
      }

      // optional int32 max = 5;
      case 5: {
        if (tag == 40) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_step;
        break;
      }

      // optional int32 step = 6;
      case 6: {
        if (tag == 48) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional .libspark.protocol.ParameterFlag flags = 7;
      case 7: {
        if (tag == 56) {
         parse_flags:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flags(static_cast< ::libspark::protocol::ParameterFlag >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libspark.protocol.ParameterInfoInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libspark.protocol.ParameterInfoInt)
  return false;
#undef DO_
}

void ParameterInfoInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libspark.protocol.ParameterInfoInt)
  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterInfoInt.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  // optional int32 min = 4;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min(), output);
  }

  // optional int32 max = 5;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max(), output);
  }

  // optional int32 step = 6;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->step(), output);
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:libspark.protocol.ParameterInfoInt)
}

::google::protobuf::uint8* ParameterInfoInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libspark.protocol.ParameterInfoInt)
  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterInfoInt.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  // optional int32 min = 4;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min(), target);
  }

  // optional int32 max = 5;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max(), target);
  }

  // optional int32 step = 6;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->step(), target);
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->flags(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libspark.protocol.ParameterInfoInt)
  return target;
}

int ParameterInfoInt::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:libspark.protocol.ParameterInfoInt)
  int total_size = 0;

  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  // optional int32 min = 4;
  if (this->min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min());
  }

  // optional int32 max = 5;
  if (this->max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max());
  }

  // optional int32 step = 6;
  if (this->step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flags());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterInfoInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libspark.protocol.ParameterInfoInt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ParameterInfoInt* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParameterInfoInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libspark.protocol.ParameterInfoInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libspark.protocol.ParameterInfoInt)
    MergeFrom(*source);
  }
}

void ParameterInfoInt::MergeFrom(const ParameterInfoInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libspark.protocol.ParameterInfoInt)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void ParameterInfoInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libspark.protocol.ParameterInfoInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterInfoInt::CopyFrom(const ParameterInfoInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libspark.protocol.ParameterInfoInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterInfoInt::IsInitialized() const {

  return true;
}

void ParameterInfoInt::Swap(ParameterInfoInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParameterInfoInt::InternalSwap(ParameterInfoInt* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(step_, other->step_);
  std::swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParameterInfoInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterInfoInt_descriptor_;
  metadata.reflection = ParameterInfoInt_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParameterInfoInt

// optional .libspark.protocol.ParameterID id = 1;
void ParameterInfoInt::clear_id() {
  id_ = 0;
}
 ::libspark::protocol::ParameterID ParameterInfoInt::id() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.id)
  return static_cast< ::libspark::protocol::ParameterID >(id_);
}
 void ParameterInfoInt::set_id(::libspark::protocol::ParameterID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.id)
}

// optional string name = 2;
void ParameterInfoInt::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ParameterInfoInt::name() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterInfoInt::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.name)
}
 void ParameterInfoInt::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterInfoInt.name)
}
 void ParameterInfoInt::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterInfoInt.name)
}
 ::std::string* ParameterInfoInt::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterInfoInt.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParameterInfoInt::release_name() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterInfoInt.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterInfoInt::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterInfoInt.name)
}

// optional int32 value = 3;
void ParameterInfoInt::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 ParameterInfoInt::value() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.value)
  return value_;
}
 void ParameterInfoInt::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.value)
}

// optional int32 min = 4;
void ParameterInfoInt::clear_min() {
  min_ = 0;
}
 ::google::protobuf::int32 ParameterInfoInt::min() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.min)
  return min_;
}
 void ParameterInfoInt::set_min(::google::protobuf::int32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.min)
}

// optional int32 max = 5;
void ParameterInfoInt::clear_max() {
  max_ = 0;
}
 ::google::protobuf::int32 ParameterInfoInt::max() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.max)
  return max_;
}
 void ParameterInfoInt::set_max(::google::protobuf::int32 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.max)
}

// optional int32 step = 6;
void ParameterInfoInt::clear_step() {
  step_ = 0;
}
 ::google::protobuf::int32 ParameterInfoInt::step() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.step)
  return step_;
}
 void ParameterInfoInt::set_step(::google::protobuf::int32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.step)
}

// optional .libspark.protocol.ParameterFlag flags = 7;
void ParameterInfoInt::clear_flags() {
  flags_ = 0;
}
 ::libspark::protocol::ParameterFlag ParameterInfoInt::flags() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.flags)
  return static_cast< ::libspark::protocol::ParameterFlag >(flags_);
}
 void ParameterInfoInt::set_flags(::libspark::protocol::ParameterFlag value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParameterInfoDouble::kIdFieldNumber;
const int ParameterInfoDouble::kNameFieldNumber;
const int ParameterInfoDouble::kValueFieldNumber;
const int ParameterInfoDouble::kMinFieldNumber;
const int ParameterInfoDouble::kMaxFieldNumber;
const int ParameterInfoDouble::kStepFieldNumber;
const int ParameterInfoDouble::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParameterInfoDouble::ParameterInfoDouble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libspark.protocol.ParameterInfoDouble)
}

void ParameterInfoDouble::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ParameterInfoDouble::ParameterInfoDouble(const ParameterInfoDouble& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libspark.protocol.ParameterInfoDouble)
}

void ParameterInfoDouble::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  min_ = 0;
  max_ = 0;
  step_ = 0;
  flags_ = 0;
}

ParameterInfoDouble::~ParameterInfoDouble() {
  // @@protoc_insertion_point(destructor:libspark.protocol.ParameterInfoDouble)
  SharedDtor();
}

void ParameterInfoDouble::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ParameterInfoDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterInfoDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterInfoDouble_descriptor_;
}

const ParameterInfoDouble& ParameterInfoDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  return *default_instance_;
}

ParameterInfoDouble* ParameterInfoDouble::default_instance_ = NULL;

ParameterInfoDouble* ParameterInfoDouble::New(::google::protobuf::Arena* arena) const {
  ParameterInfoDouble* n = new ParameterInfoDouble;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParameterInfoDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:libspark.protocol.ParameterInfoDouble)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ParameterInfoDouble, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ParameterInfoDouble*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, flags_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ParameterInfoDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libspark.protocol.ParameterInfoDouble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .libspark.protocol.ParameterID id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::libspark::protocol::ParameterID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.ParameterInfoDouble.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min;
        break;
      }

      // optional int32 min = 4;
      case 4: {
        if (tag == 32) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max;
        break;
      }

      // optional int32 max = 5;
      case 5: {
        if (tag == 40) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_step;
        break;
      }

      // optional int32 step = 6;
      case 6: {
        if (tag == 48) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional .libspark.protocol.ParameterFlag flags = 7;
      case 7: {
        if (tag == 56) {
         parse_flags:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flags(static_cast< ::libspark::protocol::ParameterFlag >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libspark.protocol.ParameterInfoDouble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libspark.protocol.ParameterInfoDouble)
  return false;
#undef DO_
}

void ParameterInfoDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libspark.protocol.ParameterInfoDouble)
  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterInfoDouble.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  // optional int32 min = 4;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min(), output);
  }

  // optional int32 max = 5;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max(), output);
  }

  // optional int32 step = 6;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->step(), output);
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:libspark.protocol.ParameterInfoDouble)
}

::google::protobuf::uint8* ParameterInfoDouble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libspark.protocol.ParameterInfoDouble)
  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterInfoDouble.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  // optional int32 min = 4;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min(), target);
  }

  // optional int32 max = 5;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max(), target);
  }

  // optional int32 step = 6;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->step(), target);
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->flags(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libspark.protocol.ParameterInfoDouble)
  return target;
}

int ParameterInfoDouble::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:libspark.protocol.ParameterInfoDouble)
  int total_size = 0;

  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  // optional int32 min = 4;
  if (this->min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min());
  }

  // optional int32 max = 5;
  if (this->max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max());
  }

  // optional int32 step = 6;
  if (this->step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->step());
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flags());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterInfoDouble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libspark.protocol.ParameterInfoDouble)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ParameterInfoDouble* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParameterInfoDouble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libspark.protocol.ParameterInfoDouble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libspark.protocol.ParameterInfoDouble)
    MergeFrom(*source);
  }
}

void ParameterInfoDouble::MergeFrom(const ParameterInfoDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libspark.protocol.ParameterInfoDouble)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void ParameterInfoDouble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libspark.protocol.ParameterInfoDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterInfoDouble::CopyFrom(const ParameterInfoDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libspark.protocol.ParameterInfoDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterInfoDouble::IsInitialized() const {

  return true;
}

void ParameterInfoDouble::Swap(ParameterInfoDouble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParameterInfoDouble::InternalSwap(ParameterInfoDouble* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(step_, other->step_);
  std::swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParameterInfoDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterInfoDouble_descriptor_;
  metadata.reflection = ParameterInfoDouble_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParameterInfoDouble

// optional .libspark.protocol.ParameterID id = 1;
void ParameterInfoDouble::clear_id() {
  id_ = 0;
}
 ::libspark::protocol::ParameterID ParameterInfoDouble::id() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.id)
  return static_cast< ::libspark::protocol::ParameterID >(id_);
}
 void ParameterInfoDouble::set_id(::libspark::protocol::ParameterID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.id)
}

// optional string name = 2;
void ParameterInfoDouble::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ParameterInfoDouble::name() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterInfoDouble::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.name)
}
 void ParameterInfoDouble::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterInfoDouble.name)
}
 void ParameterInfoDouble::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterInfoDouble.name)
}
 ::std::string* ParameterInfoDouble::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterInfoDouble.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParameterInfoDouble::release_name() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterInfoDouble.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterInfoDouble::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterInfoDouble.name)
}

// optional int32 value = 3;
void ParameterInfoDouble::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 ParameterInfoDouble::value() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.value)
  return value_;
}
 void ParameterInfoDouble::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.value)
}

// optional int32 min = 4;
void ParameterInfoDouble::clear_min() {
  min_ = 0;
}
 ::google::protobuf::int32 ParameterInfoDouble::min() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.min)
  return min_;
}
 void ParameterInfoDouble::set_min(::google::protobuf::int32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.min)
}

// optional int32 max = 5;
void ParameterInfoDouble::clear_max() {
  max_ = 0;
}
 ::google::protobuf::int32 ParameterInfoDouble::max() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.max)
  return max_;
}
 void ParameterInfoDouble::set_max(::google::protobuf::int32 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.max)
}

// optional int32 step = 6;
void ParameterInfoDouble::clear_step() {
  step_ = 0;
}
 ::google::protobuf::int32 ParameterInfoDouble::step() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.step)
  return step_;
}
 void ParameterInfoDouble::set_step(::google::protobuf::int32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.step)
}

// optional .libspark.protocol.ParameterFlag flags = 7;
void ParameterInfoDouble::clear_flags() {
  flags_ = 0;
}
 ::libspark::protocol::ParameterFlag ParameterInfoDouble::flags() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.flags)
  return static_cast< ::libspark::protocol::ParameterFlag >(flags_);
}
 void ParameterInfoDouble::set_flags(::libspark::protocol::ParameterFlag value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParameterInfoString::kIdFieldNumber;
const int ParameterInfoString::kNameFieldNumber;
const int ParameterInfoString::kValueFieldNumber;
const int ParameterInfoString::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParameterInfoString::ParameterInfoString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libspark.protocol.ParameterInfoString)
}

void ParameterInfoString::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ParameterInfoString::ParameterInfoString(const ParameterInfoString& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libspark.protocol.ParameterInfoString)
}

void ParameterInfoString::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0;
}

ParameterInfoString::~ParameterInfoString() {
  // @@protoc_insertion_point(destructor:libspark.protocol.ParameterInfoString)
  SharedDtor();
}

void ParameterInfoString::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ParameterInfoString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterInfoString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterInfoString_descriptor_;
}

const ParameterInfoString& ParameterInfoString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  return *default_instance_;
}

ParameterInfoString* ParameterInfoString::default_instance_ = NULL;

ParameterInfoString* ParameterInfoString::New(::google::protobuf::Arena* arena) const {
  ParameterInfoString* n = new ParameterInfoString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParameterInfoString::Clear() {
// @@protoc_insertion_point(message_clear_start:libspark.protocol.ParameterInfoString)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ParameterInfoString, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ParameterInfoString*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, flags_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ParameterInfoString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libspark.protocol.ParameterInfoString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .libspark.protocol.ParameterID id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::libspark::protocol::ParameterID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.ParameterInfoString.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.ParameterInfoString.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional .libspark.protocol.ParameterFlag flags = 7;
      case 7: {
        if (tag == 56) {
         parse_flags:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flags(static_cast< ::libspark::protocol::ParameterFlag >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libspark.protocol.ParameterInfoString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libspark.protocol.ParameterInfoString)
  return false;
#undef DO_
}

void ParameterInfoString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libspark.protocol.ParameterInfoString)
  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterInfoString.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterInfoString.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:libspark.protocol.ParameterInfoString)
}

::google::protobuf::uint8* ParameterInfoString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libspark.protocol.ParameterInfoString)
  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterInfoString.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterInfoString.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->flags(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libspark.protocol.ParameterInfoString)
  return target;
}

int ParameterInfoString::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:libspark.protocol.ParameterInfoString)
  int total_size = 0;

  // optional .libspark.protocol.ParameterID id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional .libspark.protocol.ParameterFlag flags = 7;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flags());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterInfoString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libspark.protocol.ParameterInfoString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ParameterInfoString* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParameterInfoString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libspark.protocol.ParameterInfoString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libspark.protocol.ParameterInfoString)
    MergeFrom(*source);
  }
}

void ParameterInfoString::MergeFrom(const ParameterInfoString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libspark.protocol.ParameterInfoString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void ParameterInfoString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libspark.protocol.ParameterInfoString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterInfoString::CopyFrom(const ParameterInfoString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libspark.protocol.ParameterInfoString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterInfoString::IsInitialized() const {

  return true;
}

void ParameterInfoString::Swap(ParameterInfoString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParameterInfoString::InternalSwap(ParameterInfoString* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParameterInfoString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterInfoString_descriptor_;
  metadata.reflection = ParameterInfoString_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParameterInfoString

// optional .libspark.protocol.ParameterID id = 1;
void ParameterInfoString::clear_id() {
  id_ = 0;
}
 ::libspark::protocol::ParameterID ParameterInfoString::id() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoString.id)
  return static_cast< ::libspark::protocol::ParameterID >(id_);
}
 void ParameterInfoString::set_id(::libspark::protocol::ParameterID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoString.id)
}

// optional string name = 2;
void ParameterInfoString::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ParameterInfoString::name() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoString.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterInfoString::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoString.name)
}
 void ParameterInfoString::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterInfoString.name)
}
 void ParameterInfoString::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterInfoString.name)
}
 ::std::string* ParameterInfoString::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterInfoString.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParameterInfoString::release_name() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterInfoString.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterInfoString::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterInfoString.name)
}

// optional string value = 3;
void ParameterInfoString::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ParameterInfoString::value() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoString.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterInfoString::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoString.value)
}
 void ParameterInfoString::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterInfoString.value)
}
 void ParameterInfoString::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterInfoString.value)
}
 ::std::string* ParameterInfoString::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterInfoString.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParameterInfoString::release_value() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterInfoString.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterInfoString::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterInfoString.value)
}

// optional .libspark.protocol.ParameterFlag flags = 7;
void ParameterInfoString::clear_flags() {
  flags_ = 0;
}
 ::libspark::protocol::ParameterFlag ParameterInfoString::flags() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoString.flags)
  return static_cast< ::libspark::protocol::ParameterFlag >(flags_);
}
 void ParameterInfoString::set_flags(::libspark::protocol::ParameterFlag value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoString.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParameterRequest::kParamTypeFieldNumber;
const int ParameterRequest::kParamIDFieldNumber;
const int ParameterRequest::kParamSizeFieldNumber;
const int ParameterRequest::kParamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParameterRequest::ParameterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libspark.protocol.ParameterRequest)
}

void ParameterRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ParameterRequest::ParameterRequest(const ParameterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libspark.protocol.ParameterRequest)
}

void ParameterRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  paramtype_ = 0;
  paramid_ = 0;
  paramsize_ = 0;
  paraminfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ParameterRequest::~ParameterRequest() {
  // @@protoc_insertion_point(destructor:libspark.protocol.ParameterRequest)
  SharedDtor();
}

void ParameterRequest::SharedDtor() {
  paraminfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ParameterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterRequest_descriptor_;
}

const ParameterRequest& ParameterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  return *default_instance_;
}

ParameterRequest* ParameterRequest::default_instance_ = NULL;

ParameterRequest* ParameterRequest::New(::google::protobuf::Arena* arena) const {
  ParameterRequest* n = new ParameterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParameterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:libspark.protocol.ParameterRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ParameterRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ParameterRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(paramtype_, paramid_);
  paramsize_ = 0;
  paraminfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ParameterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libspark.protocol.ParameterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .libspark.protocol.ParameterType paramType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_paramtype(static_cast< ::libspark::protocol::ParameterType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_paramID;
        break;
      }

      // optional .libspark.protocol.ParameterID paramID = 2;
      case 2: {
        if (tag == 16) {
         parse_paramID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_paramid(static_cast< ::libspark::protocol::ParameterID >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_paramSize;
        break;
      }

      // optional int32 paramSize = 3;
      case 3: {
        if (tag == 24) {
         parse_paramSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paramsize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_paramInfo;
        break;
      }

      // optional bytes paramInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_paramInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_paraminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libspark.protocol.ParameterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libspark.protocol.ParameterRequest)
  return false;
#undef DO_
}

void ParameterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libspark.protocol.ParameterRequest)
  // optional .libspark.protocol.ParameterType paramType = 1;
  if (this->paramtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->paramtype(), output);
  }

  // optional .libspark.protocol.ParameterID paramID = 2;
  if (this->paramid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->paramid(), output);
  }

  // optional int32 paramSize = 3;
  if (this->paramsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->paramsize(), output);
  }

  // optional bytes paramInfo = 4;
  if (this->paraminfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->paraminfo(), output);
  }

  // @@protoc_insertion_point(serialize_end:libspark.protocol.ParameterRequest)
}

::google::protobuf::uint8* ParameterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libspark.protocol.ParameterRequest)
  // optional .libspark.protocol.ParameterType paramType = 1;
  if (this->paramtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->paramtype(), target);
  }

  // optional .libspark.protocol.ParameterID paramID = 2;
  if (this->paramid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->paramid(), target);
  }

  // optional int32 paramSize = 3;
  if (this->paramsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->paramsize(), target);
  }

  // optional bytes paramInfo = 4;
  if (this->paraminfo().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->paraminfo(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libspark.protocol.ParameterRequest)
  return target;
}

int ParameterRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:libspark.protocol.ParameterRequest)
  int total_size = 0;

  // optional .libspark.protocol.ParameterType paramType = 1;
  if (this->paramtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->paramtype());
  }

  // optional .libspark.protocol.ParameterID paramID = 2;
  if (this->paramid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->paramid());
  }

  // optional int32 paramSize = 3;
  if (this->paramsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->paramsize());
  }

  // optional bytes paramInfo = 4;
  if (this->paraminfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->paraminfo());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libspark.protocol.ParameterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ParameterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParameterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libspark.protocol.ParameterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libspark.protocol.ParameterRequest)
    MergeFrom(*source);
  }
}

void ParameterRequest::MergeFrom(const ParameterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libspark.protocol.ParameterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.paramtype() != 0) {
    set_paramtype(from.paramtype());
  }
  if (from.paramid() != 0) {
    set_paramid(from.paramid());
  }
  if (from.paramsize() != 0) {
    set_paramsize(from.paramsize());
  }
  if (from.paraminfo().size() > 0) {

    paraminfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paraminfo_);
  }
}

void ParameterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libspark.protocol.ParameterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterRequest::CopyFrom(const ParameterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libspark.protocol.ParameterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterRequest::IsInitialized() const {

  return true;
}

void ParameterRequest::Swap(ParameterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParameterRequest::InternalSwap(ParameterRequest* other) {
  std::swap(paramtype_, other->paramtype_);
  std::swap(paramid_, other->paramid_);
  std::swap(paramsize_, other->paramsize_);
  paraminfo_.Swap(&other->paraminfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParameterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterRequest_descriptor_;
  metadata.reflection = ParameterRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParameterRequest

// optional .libspark.protocol.ParameterType paramType = 1;
void ParameterRequest::clear_paramtype() {
  paramtype_ = 0;
}
 ::libspark::protocol::ParameterType ParameterRequest::paramtype() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterRequest.paramType)
  return static_cast< ::libspark::protocol::ParameterType >(paramtype_);
}
 void ParameterRequest::set_paramtype(::libspark::protocol::ParameterType value) {
  
  paramtype_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterRequest.paramType)
}

// optional .libspark.protocol.ParameterID paramID = 2;
void ParameterRequest::clear_paramid() {
  paramid_ = 0;
}
 ::libspark::protocol::ParameterID ParameterRequest::paramid() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterRequest.paramID)
  return static_cast< ::libspark::protocol::ParameterID >(paramid_);
}
 void ParameterRequest::set_paramid(::libspark::protocol::ParameterID value) {
  
  paramid_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterRequest.paramID)
}

// optional int32 paramSize = 3;
void ParameterRequest::clear_paramsize() {
  paramsize_ = 0;
}
 ::google::protobuf::int32 ParameterRequest::paramsize() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterRequest.paramSize)
  return paramsize_;
}
 void ParameterRequest::set_paramsize(::google::protobuf::int32 value) {
  
  paramsize_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterRequest.paramSize)
}

// optional bytes paramInfo = 4;
void ParameterRequest::clear_paraminfo() {
  paraminfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ParameterRequest::paraminfo() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterRequest.paramInfo)
  return paraminfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterRequest::set_paraminfo(const ::std::string& value) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterRequest.paramInfo)
}
 void ParameterRequest::set_paraminfo(const char* value) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterRequest.paramInfo)
}
 void ParameterRequest::set_paraminfo(const void* value, size_t size) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterRequest.paramInfo)
}
 ::std::string* ParameterRequest::mutable_paraminfo() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterRequest.paramInfo)
  return paraminfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParameterRequest::release_paraminfo() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterRequest.paramInfo)
  
  return paraminfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterRequest::set_allocated_paraminfo(::std::string* paraminfo) {
  if (paraminfo != NULL) {
    
  } else {
    
  }
  paraminfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paraminfo);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterRequest.paramInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ParameterResponse_ResponseCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterResponse_ResponseCode_descriptor_;
}
bool ParameterResponse_ResponseCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParameterResponse_ResponseCode ParameterResponse::RESPONSE_UNKNOW;
const ParameterResponse_ResponseCode ParameterResponse::RESPONSE_OK;
const ParameterResponse_ResponseCode ParameterResponse::RESPONSE_FAILURE;
const ParameterResponse_ResponseCode ParameterResponse::ResponseCode_MIN;
const ParameterResponse_ResponseCode ParameterResponse::ResponseCode_MAX;
const int ParameterResponse::ResponseCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParameterResponse::kCodeFieldNumber;
const int ParameterResponse::kMessageFieldNumber;
const int ParameterResponse::kParamTypeFieldNumber;
const int ParameterResponse::kParamSizeFieldNumber;
const int ParameterResponse::kParamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParameterResponse::ParameterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libspark.protocol.ParameterResponse)
}

void ParameterResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ParameterResponse::ParameterResponse(const ParameterResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libspark.protocol.ParameterResponse)
}

void ParameterResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paramtype_ = 0;
  paramsize_ = 0;
  paraminfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ParameterResponse::~ParameterResponse() {
  // @@protoc_insertion_point(destructor:libspark.protocol.ParameterResponse)
  SharedDtor();
}

void ParameterResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paraminfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ParameterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterResponse_descriptor_;
}

const ParameterResponse& ParameterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  return *default_instance_;
}

ParameterResponse* ParameterResponse::default_instance_ = NULL;

ParameterResponse* ParameterResponse::New(::google::protobuf::Arena* arena) const {
  ParameterResponse* n = new ParameterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParameterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:libspark.protocol.ParameterResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ParameterResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ParameterResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(code_, paramtype_);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paramsize_ = 0;
  paraminfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ParameterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libspark.protocol.ParameterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .libspark.protocol.ParameterResponse.ResponseCode code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::libspark::protocol::ParameterResponse_ResponseCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.ParameterResponse.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_paramType;
        break;
      }

      // optional .libspark.protocol.ParameterType paramType = 3;
      case 3: {
        if (tag == 24) {
         parse_paramType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_paramtype(static_cast< ::libspark::protocol::ParameterType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_paramSize;
        break;
      }

      // optional int32 paramSize = 4;
      case 4: {
        if (tag == 32) {
         parse_paramSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paramsize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_paramInfo;
        break;
      }

      // optional bytes paramInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_paramInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_paraminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libspark.protocol.ParameterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libspark.protocol.ParameterResponse)
  return false;
#undef DO_
}

void ParameterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libspark.protocol.ParameterResponse)
  // optional .libspark.protocol.ParameterResponse.ResponseCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional .libspark.protocol.ParameterType paramType = 3;
  if (this->paramtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->paramtype(), output);
  }

  // optional int32 paramSize = 4;
  if (this->paramsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->paramsize(), output);
  }

  // optional bytes paramInfo = 5;
  if (this->paraminfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->paraminfo(), output);
  }

  // @@protoc_insertion_point(serialize_end:libspark.protocol.ParameterResponse)
}

::google::protobuf::uint8* ParameterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libspark.protocol.ParameterResponse)
  // optional .libspark.protocol.ParameterResponse.ResponseCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.ParameterResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional .libspark.protocol.ParameterType paramType = 3;
  if (this->paramtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->paramtype(), target);
  }

  // optional int32 paramSize = 4;
  if (this->paramsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->paramsize(), target);
  }

  // optional bytes paramInfo = 5;
  if (this->paraminfo().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->paraminfo(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libspark.protocol.ParameterResponse)
  return target;
}

int ParameterResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:libspark.protocol.ParameterResponse)
  int total_size = 0;

  // optional .libspark.protocol.ParameterResponse.ResponseCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional .libspark.protocol.ParameterType paramType = 3;
  if (this->paramtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->paramtype());
  }

  // optional int32 paramSize = 4;
  if (this->paramsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->paramsize());
  }

  // optional bytes paramInfo = 5;
  if (this->paraminfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->paraminfo());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libspark.protocol.ParameterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ParameterResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParameterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libspark.protocol.ParameterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libspark.protocol.ParameterResponse)
    MergeFrom(*source);
  }
}

void ParameterResponse::MergeFrom(const ParameterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libspark.protocol.ParameterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.paramtype() != 0) {
    set_paramtype(from.paramtype());
  }
  if (from.paramsize() != 0) {
    set_paramsize(from.paramsize());
  }
  if (from.paraminfo().size() > 0) {

    paraminfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paraminfo_);
  }
}

void ParameterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libspark.protocol.ParameterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterResponse::CopyFrom(const ParameterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libspark.protocol.ParameterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterResponse::IsInitialized() const {

  return true;
}

void ParameterResponse::Swap(ParameterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParameterResponse::InternalSwap(ParameterResponse* other) {
  std::swap(code_, other->code_);
  message_.Swap(&other->message_);
  std::swap(paramtype_, other->paramtype_);
  std::swap(paramsize_, other->paramsize_);
  paraminfo_.Swap(&other->paraminfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParameterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterResponse_descriptor_;
  metadata.reflection = ParameterResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParameterResponse

// optional .libspark.protocol.ParameterResponse.ResponseCode code = 1;
void ParameterResponse::clear_code() {
  code_ = 0;
}
 ::libspark::protocol::ParameterResponse_ResponseCode ParameterResponse::code() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterResponse.code)
  return static_cast< ::libspark::protocol::ParameterResponse_ResponseCode >(code_);
}
 void ParameterResponse::set_code(::libspark::protocol::ParameterResponse_ResponseCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterResponse.code)
}

// optional string message = 2;
void ParameterResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ParameterResponse::message() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterResponse.message)
}
 void ParameterResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterResponse.message)
}
 void ParameterResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterResponse.message)
}
 ::std::string* ParameterResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParameterResponse::release_message() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterResponse.message)
}

// optional .libspark.protocol.ParameterType paramType = 3;
void ParameterResponse::clear_paramtype() {
  paramtype_ = 0;
}
 ::libspark::protocol::ParameterType ParameterResponse::paramtype() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterResponse.paramType)
  return static_cast< ::libspark::protocol::ParameterType >(paramtype_);
}
 void ParameterResponse::set_paramtype(::libspark::protocol::ParameterType value) {
  
  paramtype_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterResponse.paramType)
}

// optional int32 paramSize = 4;
void ParameterResponse::clear_paramsize() {
  paramsize_ = 0;
}
 ::google::protobuf::int32 ParameterResponse::paramsize() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterResponse.paramSize)
  return paramsize_;
}
 void ParameterResponse::set_paramsize(::google::protobuf::int32 value) {
  
  paramsize_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterResponse.paramSize)
}

// optional bytes paramInfo = 5;
void ParameterResponse::clear_paraminfo() {
  paraminfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ParameterResponse::paraminfo() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterResponse.paramInfo)
  return paraminfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterResponse::set_paraminfo(const ::std::string& value) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterResponse.paramInfo)
}
 void ParameterResponse::set_paraminfo(const char* value) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterResponse.paramInfo)
}
 void ParameterResponse::set_paraminfo(const void* value, size_t size) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterResponse.paramInfo)
}
 ::std::string* ParameterResponse::mutable_paraminfo() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterResponse.paramInfo)
  return paraminfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParameterResponse::release_paraminfo() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterResponse.paramInfo)
  
  return paraminfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParameterResponse::set_allocated_paraminfo(::std::string* paraminfo) {
  if (paraminfo != NULL) {
    
  } else {
    
  }
  paraminfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paraminfo);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterResponse.paramInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace libspark

// @@protoc_insertion_point(global_scope)
