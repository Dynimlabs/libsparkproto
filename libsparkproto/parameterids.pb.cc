// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libsparkproto/parameterids.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libsparkproto/parameterids.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace libspark {
namespace protocol {

namespace {

const ::google::protobuf::EnumDescriptor* ParameterID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_libsparkproto_2fparameterids_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_libsparkproto_2fparameterids_2eproto() {
  protobuf_AddDesc_libsparkproto_2fparameterids_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libsparkproto/parameterids.proto");
  GOOGLE_CHECK(file != NULL);
  ParameterID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libsparkproto_2fparameterids_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_libsparkproto_2fparameterids_2eproto() {
}

void protobuf_AddDesc_libsparkproto_2fparameterids_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_libsparkproto_2fparameterids_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n libsparkproto/parameterids.proto\022\021libs"
    "park.protocol*\233\002\n\013ParameterID\022\025\n\021PARAMET"
    "ER_UNKNOWN\020\000\022\016\n\nRESOLUTION\020\001\022\021\n\rAUTO_EXP"
    "OSURE\020\002\022\026\n\022AUTO_EXPOSURE_MODE\020\003\022\023\n\017MANUA"
    "L_EXPOSURE\020\004\022\017\n\013MANUAL_GAIN\020\005\022\013\n\007AUTO_WB"
    "\020\006\022\020\n\014AUTO_WB_MODE\020\007\022\r\n\tMANUAL_WB\020\010\022\014\n\010L"
    "ED_MODE\020\t\022\030\n\024LED_BRIGHTNESS_LEVEL\020\n\022\024\n\020C"
    "ALIBRATION_DATA\020\013\022\020\n\014CAMERA_RESET\020\014\022\026\n\022D"
    "EVICE_INFORMATION\020\rB\002H\001b\006proto3", 351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libsparkproto/parameterids.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libsparkproto_2fparameterids_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libsparkproto_2fparameterids_2eproto {
  StaticDescriptorInitializer_libsparkproto_2fparameterids_2eproto() {
    protobuf_AddDesc_libsparkproto_2fparameterids_2eproto();
  }
} static_descriptor_initializer_libsparkproto_2fparameterids_2eproto_;
const ::google::protobuf::EnumDescriptor* ParameterID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterID_descriptor_;
}
bool ParameterID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace libspark

// @@protoc_insertion_point(global_scope)
