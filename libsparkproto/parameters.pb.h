// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libsparkproto/parameters.proto

#ifndef PROTOBUF_libsparkproto_2fparameters_2eproto__INCLUDED
#define PROTOBUF_libsparkproto_2fparameters_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "libsparkproto/parameterids.pb.h"
// @@protoc_insertion_point(includes)

namespace libspark {
namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
void protobuf_AssignDesc_libsparkproto_2fparameters_2eproto();
void protobuf_ShutdownFile_libsparkproto_2fparameters_2eproto();

class ParameterInfoBool;
class ParameterInfoDouble;
class ParameterInfoInt;
class ParameterInfoString;
class ParameterRequest;
class ParameterResponse;

enum ParameterResponse_ResponseCode {
  ParameterResponse_ResponseCode_RESPONSE_UNKNOW = 0,
  ParameterResponse_ResponseCode_RESPONSE_OK = 1,
  ParameterResponse_ResponseCode_RESPONSE_FAILURE = 2,
  ParameterResponse_ResponseCode_ParameterResponse_ResponseCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParameterResponse_ResponseCode_ParameterResponse_ResponseCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ParameterResponse_ResponseCode_IsValid(int value);
const ParameterResponse_ResponseCode ParameterResponse_ResponseCode_ResponseCode_MIN = ParameterResponse_ResponseCode_RESPONSE_UNKNOW;
const ParameterResponse_ResponseCode ParameterResponse_ResponseCode_ResponseCode_MAX = ParameterResponse_ResponseCode_RESPONSE_FAILURE;
const int ParameterResponse_ResponseCode_ResponseCode_ARRAYSIZE = ParameterResponse_ResponseCode_ResponseCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParameterResponse_ResponseCode_descriptor();
inline const ::std::string& ParameterResponse_ResponseCode_Name(ParameterResponse_ResponseCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParameterResponse_ResponseCode_descriptor(), value);
}
inline bool ParameterResponse_ResponseCode_Parse(
    const ::std::string& name, ParameterResponse_ResponseCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParameterResponse_ResponseCode>(
    ParameterResponse_ResponseCode_descriptor(), name, value);
}
enum ParameterFlag {
  PARAMETER_WRITEABLE = 0,
  PARAMETER_READONLY = 1,
  ParameterFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParameterFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ParameterFlag_IsValid(int value);
const ParameterFlag ParameterFlag_MIN = PARAMETER_WRITEABLE;
const ParameterFlag ParameterFlag_MAX = PARAMETER_READONLY;
const int ParameterFlag_ARRAYSIZE = ParameterFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParameterFlag_descriptor();
inline const ::std::string& ParameterFlag_Name(ParameterFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParameterFlag_descriptor(), value);
}
inline bool ParameterFlag_Parse(
    const ::std::string& name, ParameterFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParameterFlag>(
    ParameterFlag_descriptor(), name, value);
}
enum ParameterType {
  PARAMETER_UNKNOWN_TYPE = 0,
  PARAMETER_READ_BOOLEAN = 1,
  PARAMETER_WRITE_BOOLEAN = 2,
  PARAMETER_READ_INT = 3,
  PARAMETER_WRITE_INT = 4,
  PARAMETER_READ_DOUBLE = 5,
  PARAMETER_WRITE_DOUBLE = 6,
  PARAMETER_READ_STRING = 7,
  PARAMETER_WRITE_STRING = 8,
  PARAMETER_READ_DEVICEINFO = 9,
  ParameterType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParameterType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ParameterType_IsValid(int value);
const ParameterType ParameterType_MIN = PARAMETER_UNKNOWN_TYPE;
const ParameterType ParameterType_MAX = PARAMETER_READ_DEVICEINFO;
const int ParameterType_ARRAYSIZE = ParameterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParameterType_descriptor();
inline const ::std::string& ParameterType_Name(ParameterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParameterType_descriptor(), value);
}
inline bool ParameterType_Parse(
    const ::std::string& name, ParameterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParameterType>(
    ParameterType_descriptor(), name, value);
}
// ===================================================================

class ParameterInfoBool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:libspark.protocol.ParameterInfoBool) */ {
 public:
  ParameterInfoBool();
  virtual ~ParameterInfoBool();

  ParameterInfoBool(const ParameterInfoBool& from);

  inline ParameterInfoBool& operator=(const ParameterInfoBool& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterInfoBool& default_instance();

  void Swap(ParameterInfoBool* other);

  // implements Message ----------------------------------------------

  inline ParameterInfoBool* New() const { return New(NULL); }

  ParameterInfoBool* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterInfoBool& from);
  void MergeFrom(const ParameterInfoBool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParameterInfoBool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .libspark.protocol.ParameterID id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::libspark::protocol::ParameterID id() const;
  void set_id(::libspark::protocol::ParameterID value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  bool value() const;
  void set_value(bool value);

  // optional .libspark.protocol.ParameterFlag flags = 7;
  void clear_flags();
  static const int kFlagsFieldNumber = 7;
  ::libspark::protocol::ParameterFlag flags() const;
  void set_flags(::libspark::protocol::ParameterFlag value);

  // @@protoc_insertion_point(class_scope:libspark.protocol.ParameterInfoBool)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int id_;
  bool value_;
  int flags_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_AssignDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_ShutdownFile_libsparkproto_2fparameters_2eproto();

  void InitAsDefaultInstance();
  static ParameterInfoBool* default_instance_;
};
// -------------------------------------------------------------------

class ParameterInfoInt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:libspark.protocol.ParameterInfoInt) */ {
 public:
  ParameterInfoInt();
  virtual ~ParameterInfoInt();

  ParameterInfoInt(const ParameterInfoInt& from);

  inline ParameterInfoInt& operator=(const ParameterInfoInt& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterInfoInt& default_instance();

  void Swap(ParameterInfoInt* other);

  // implements Message ----------------------------------------------

  inline ParameterInfoInt* New() const { return New(NULL); }

  ParameterInfoInt* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterInfoInt& from);
  void MergeFrom(const ParameterInfoInt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParameterInfoInt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .libspark.protocol.ParameterID id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::libspark::protocol::ParameterID id() const;
  void set_id(::libspark::protocol::ParameterID value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // optional int32 min = 4;
  void clear_min();
  static const int kMinFieldNumber = 4;
  ::google::protobuf::int32 min() const;
  void set_min(::google::protobuf::int32 value);

  // optional int32 max = 5;
  void clear_max();
  static const int kMaxFieldNumber = 5;
  ::google::protobuf::int32 max() const;
  void set_max(::google::protobuf::int32 value);

  // optional int32 step = 6;
  void clear_step();
  static const int kStepFieldNumber = 6;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // optional .libspark.protocol.ParameterFlag flags = 7;
  void clear_flags();
  static const int kFlagsFieldNumber = 7;
  ::libspark::protocol::ParameterFlag flags() const;
  void set_flags(::libspark::protocol::ParameterFlag value);

  // @@protoc_insertion_point(class_scope:libspark.protocol.ParameterInfoInt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int id_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 max_;
  ::google::protobuf::int32 step_;
  int flags_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_AssignDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_ShutdownFile_libsparkproto_2fparameters_2eproto();

  void InitAsDefaultInstance();
  static ParameterInfoInt* default_instance_;
};
// -------------------------------------------------------------------

class ParameterInfoDouble : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:libspark.protocol.ParameterInfoDouble) */ {
 public:
  ParameterInfoDouble();
  virtual ~ParameterInfoDouble();

  ParameterInfoDouble(const ParameterInfoDouble& from);

  inline ParameterInfoDouble& operator=(const ParameterInfoDouble& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterInfoDouble& default_instance();

  void Swap(ParameterInfoDouble* other);

  // implements Message ----------------------------------------------

  inline ParameterInfoDouble* New() const { return New(NULL); }

  ParameterInfoDouble* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterInfoDouble& from);
  void MergeFrom(const ParameterInfoDouble& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParameterInfoDouble* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .libspark.protocol.ParameterID id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::libspark::protocol::ParameterID id() const;
  void set_id(::libspark::protocol::ParameterID value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // optional int32 min = 4;
  void clear_min();
  static const int kMinFieldNumber = 4;
  ::google::protobuf::int32 min() const;
  void set_min(::google::protobuf::int32 value);

  // optional int32 max = 5;
  void clear_max();
  static const int kMaxFieldNumber = 5;
  ::google::protobuf::int32 max() const;
  void set_max(::google::protobuf::int32 value);

  // optional int32 step = 6;
  void clear_step();
  static const int kStepFieldNumber = 6;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // optional .libspark.protocol.ParameterFlag flags = 7;
  void clear_flags();
  static const int kFlagsFieldNumber = 7;
  ::libspark::protocol::ParameterFlag flags() const;
  void set_flags(::libspark::protocol::ParameterFlag value);

  // @@protoc_insertion_point(class_scope:libspark.protocol.ParameterInfoDouble)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int id_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 max_;
  ::google::protobuf::int32 step_;
  int flags_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_AssignDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_ShutdownFile_libsparkproto_2fparameters_2eproto();

  void InitAsDefaultInstance();
  static ParameterInfoDouble* default_instance_;
};
// -------------------------------------------------------------------

class ParameterInfoString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:libspark.protocol.ParameterInfoString) */ {
 public:
  ParameterInfoString();
  virtual ~ParameterInfoString();

  ParameterInfoString(const ParameterInfoString& from);

  inline ParameterInfoString& operator=(const ParameterInfoString& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterInfoString& default_instance();

  void Swap(ParameterInfoString* other);

  // implements Message ----------------------------------------------

  inline ParameterInfoString* New() const { return New(NULL); }

  ParameterInfoString* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterInfoString& from);
  void MergeFrom(const ParameterInfoString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParameterInfoString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .libspark.protocol.ParameterID id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::libspark::protocol::ParameterID id() const;
  void set_id(::libspark::protocol::ParameterID value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional .libspark.protocol.ParameterFlag flags = 7;
  void clear_flags();
  static const int kFlagsFieldNumber = 7;
  ::libspark::protocol::ParameterFlag flags() const;
  void set_flags(::libspark::protocol::ParameterFlag value);

  // @@protoc_insertion_point(class_scope:libspark.protocol.ParameterInfoString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int id_;
  int flags_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_AssignDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_ShutdownFile_libsparkproto_2fparameters_2eproto();

  void InitAsDefaultInstance();
  static ParameterInfoString* default_instance_;
};
// -------------------------------------------------------------------

class ParameterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:libspark.protocol.ParameterRequest) */ {
 public:
  ParameterRequest();
  virtual ~ParameterRequest();

  ParameterRequest(const ParameterRequest& from);

  inline ParameterRequest& operator=(const ParameterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterRequest& default_instance();

  void Swap(ParameterRequest* other);

  // implements Message ----------------------------------------------

  inline ParameterRequest* New() const { return New(NULL); }

  ParameterRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterRequest& from);
  void MergeFrom(const ParameterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParameterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .libspark.protocol.ParameterType paramType = 1;
  void clear_paramtype();
  static const int kParamTypeFieldNumber = 1;
  ::libspark::protocol::ParameterType paramtype() const;
  void set_paramtype(::libspark::protocol::ParameterType value);

  // optional .libspark.protocol.ParameterID paramID = 2;
  void clear_paramid();
  static const int kParamIDFieldNumber = 2;
  ::libspark::protocol::ParameterID paramid() const;
  void set_paramid(::libspark::protocol::ParameterID value);

  // optional int32 paramSize = 3;
  void clear_paramsize();
  static const int kParamSizeFieldNumber = 3;
  ::google::protobuf::int32 paramsize() const;
  void set_paramsize(::google::protobuf::int32 value);

  // optional bytes paramInfo = 4;
  void clear_paraminfo();
  static const int kParamInfoFieldNumber = 4;
  const ::std::string& paraminfo() const;
  void set_paraminfo(const ::std::string& value);
  void set_paraminfo(const char* value);
  void set_paraminfo(const void* value, size_t size);
  ::std::string* mutable_paraminfo();
  ::std::string* release_paraminfo();
  void set_allocated_paraminfo(::std::string* paraminfo);

  // @@protoc_insertion_point(class_scope:libspark.protocol.ParameterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int paramtype_;
  int paramid_;
  ::google::protobuf::internal::ArenaStringPtr paraminfo_;
  ::google::protobuf::int32 paramsize_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_AssignDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_ShutdownFile_libsparkproto_2fparameters_2eproto();

  void InitAsDefaultInstance();
  static ParameterRequest* default_instance_;
};
// -------------------------------------------------------------------

class ParameterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:libspark.protocol.ParameterResponse) */ {
 public:
  ParameterResponse();
  virtual ~ParameterResponse();

  ParameterResponse(const ParameterResponse& from);

  inline ParameterResponse& operator=(const ParameterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterResponse& default_instance();

  void Swap(ParameterResponse* other);

  // implements Message ----------------------------------------------

  inline ParameterResponse* New() const { return New(NULL); }

  ParameterResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterResponse& from);
  void MergeFrom(const ParameterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParameterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParameterResponse_ResponseCode ResponseCode;
  static const ResponseCode RESPONSE_UNKNOW =
    ParameterResponse_ResponseCode_RESPONSE_UNKNOW;
  static const ResponseCode RESPONSE_OK =
    ParameterResponse_ResponseCode_RESPONSE_OK;
  static const ResponseCode RESPONSE_FAILURE =
    ParameterResponse_ResponseCode_RESPONSE_FAILURE;
  static inline bool ResponseCode_IsValid(int value) {
    return ParameterResponse_ResponseCode_IsValid(value);
  }
  static const ResponseCode ResponseCode_MIN =
    ParameterResponse_ResponseCode_ResponseCode_MIN;
  static const ResponseCode ResponseCode_MAX =
    ParameterResponse_ResponseCode_ResponseCode_MAX;
  static const int ResponseCode_ARRAYSIZE =
    ParameterResponse_ResponseCode_ResponseCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseCode_descriptor() {
    return ParameterResponse_ResponseCode_descriptor();
  }
  static inline const ::std::string& ResponseCode_Name(ResponseCode value) {
    return ParameterResponse_ResponseCode_Name(value);
  }
  static inline bool ResponseCode_Parse(const ::std::string& name,
      ResponseCode* value) {
    return ParameterResponse_ResponseCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .libspark.protocol.ParameterResponse.ResponseCode code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::libspark::protocol::ParameterResponse_ResponseCode code() const;
  void set_code(::libspark::protocol::ParameterResponse_ResponseCode value);

  // optional string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .libspark.protocol.ParameterType paramType = 3;
  void clear_paramtype();
  static const int kParamTypeFieldNumber = 3;
  ::libspark::protocol::ParameterType paramtype() const;
  void set_paramtype(::libspark::protocol::ParameterType value);

  // optional int32 paramSize = 4;
  void clear_paramsize();
  static const int kParamSizeFieldNumber = 4;
  ::google::protobuf::int32 paramsize() const;
  void set_paramsize(::google::protobuf::int32 value);

  // optional bytes paramInfo = 5;
  void clear_paraminfo();
  static const int kParamInfoFieldNumber = 5;
  const ::std::string& paraminfo() const;
  void set_paraminfo(const ::std::string& value);
  void set_paraminfo(const char* value);
  void set_paraminfo(const void* value, size_t size);
  ::std::string* mutable_paraminfo();
  ::std::string* release_paraminfo();
  void set_allocated_paraminfo(::std::string* paraminfo);

  // @@protoc_insertion_point(class_scope:libspark.protocol.ParameterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  int paramtype_;
  ::google::protobuf::internal::ArenaStringPtr paraminfo_;
  ::google::protobuf::int32 paramsize_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_AssignDesc_libsparkproto_2fparameters_2eproto();
  friend void protobuf_ShutdownFile_libsparkproto_2fparameters_2eproto();

  void InitAsDefaultInstance();
  static ParameterResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ParameterInfoBool

// optional .libspark.protocol.ParameterID id = 1;
inline void ParameterInfoBool::clear_id() {
  id_ = 0;
}
inline ::libspark::protocol::ParameterID ParameterInfoBool::id() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoBool.id)
  return static_cast< ::libspark::protocol::ParameterID >(id_);
}
inline void ParameterInfoBool::set_id(::libspark::protocol::ParameterID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoBool.id)
}

// optional string name = 2;
inline void ParameterInfoBool::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParameterInfoBool::name() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoBool.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfoBool::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoBool.name)
}
inline void ParameterInfoBool::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterInfoBool.name)
}
inline void ParameterInfoBool::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterInfoBool.name)
}
inline ::std::string* ParameterInfoBool::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterInfoBool.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParameterInfoBool::release_name() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterInfoBool.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfoBool::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterInfoBool.name)
}

// optional bool value = 3;
inline void ParameterInfoBool::clear_value() {
  value_ = false;
}
inline bool ParameterInfoBool::value() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoBool.value)
  return value_;
}
inline void ParameterInfoBool::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoBool.value)
}

// optional .libspark.protocol.ParameterFlag flags = 7;
inline void ParameterInfoBool::clear_flags() {
  flags_ = 0;
}
inline ::libspark::protocol::ParameterFlag ParameterInfoBool::flags() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoBool.flags)
  return static_cast< ::libspark::protocol::ParameterFlag >(flags_);
}
inline void ParameterInfoBool::set_flags(::libspark::protocol::ParameterFlag value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoBool.flags)
}

// -------------------------------------------------------------------

// ParameterInfoInt

// optional .libspark.protocol.ParameterID id = 1;
inline void ParameterInfoInt::clear_id() {
  id_ = 0;
}
inline ::libspark::protocol::ParameterID ParameterInfoInt::id() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.id)
  return static_cast< ::libspark::protocol::ParameterID >(id_);
}
inline void ParameterInfoInt::set_id(::libspark::protocol::ParameterID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.id)
}

// optional string name = 2;
inline void ParameterInfoInt::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParameterInfoInt::name() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfoInt::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.name)
}
inline void ParameterInfoInt::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterInfoInt.name)
}
inline void ParameterInfoInt::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterInfoInt.name)
}
inline ::std::string* ParameterInfoInt::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterInfoInt.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParameterInfoInt::release_name() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterInfoInt.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfoInt::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterInfoInt.name)
}

// optional int32 value = 3;
inline void ParameterInfoInt::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 ParameterInfoInt::value() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.value)
  return value_;
}
inline void ParameterInfoInt::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.value)
}

// optional int32 min = 4;
inline void ParameterInfoInt::clear_min() {
  min_ = 0;
}
inline ::google::protobuf::int32 ParameterInfoInt::min() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.min)
  return min_;
}
inline void ParameterInfoInt::set_min(::google::protobuf::int32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.min)
}

// optional int32 max = 5;
inline void ParameterInfoInt::clear_max() {
  max_ = 0;
}
inline ::google::protobuf::int32 ParameterInfoInt::max() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.max)
  return max_;
}
inline void ParameterInfoInt::set_max(::google::protobuf::int32 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.max)
}

// optional int32 step = 6;
inline void ParameterInfoInt::clear_step() {
  step_ = 0;
}
inline ::google::protobuf::int32 ParameterInfoInt::step() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.step)
  return step_;
}
inline void ParameterInfoInt::set_step(::google::protobuf::int32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.step)
}

// optional .libspark.protocol.ParameterFlag flags = 7;
inline void ParameterInfoInt::clear_flags() {
  flags_ = 0;
}
inline ::libspark::protocol::ParameterFlag ParameterInfoInt::flags() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoInt.flags)
  return static_cast< ::libspark::protocol::ParameterFlag >(flags_);
}
inline void ParameterInfoInt::set_flags(::libspark::protocol::ParameterFlag value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoInt.flags)
}

// -------------------------------------------------------------------

// ParameterInfoDouble

// optional .libspark.protocol.ParameterID id = 1;
inline void ParameterInfoDouble::clear_id() {
  id_ = 0;
}
inline ::libspark::protocol::ParameterID ParameterInfoDouble::id() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.id)
  return static_cast< ::libspark::protocol::ParameterID >(id_);
}
inline void ParameterInfoDouble::set_id(::libspark::protocol::ParameterID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.id)
}

// optional string name = 2;
inline void ParameterInfoDouble::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParameterInfoDouble::name() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfoDouble::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.name)
}
inline void ParameterInfoDouble::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterInfoDouble.name)
}
inline void ParameterInfoDouble::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterInfoDouble.name)
}
inline ::std::string* ParameterInfoDouble::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterInfoDouble.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParameterInfoDouble::release_name() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterInfoDouble.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfoDouble::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterInfoDouble.name)
}

// optional int32 value = 3;
inline void ParameterInfoDouble::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 ParameterInfoDouble::value() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.value)
  return value_;
}
inline void ParameterInfoDouble::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.value)
}

// optional int32 min = 4;
inline void ParameterInfoDouble::clear_min() {
  min_ = 0;
}
inline ::google::protobuf::int32 ParameterInfoDouble::min() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.min)
  return min_;
}
inline void ParameterInfoDouble::set_min(::google::protobuf::int32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.min)
}

// optional int32 max = 5;
inline void ParameterInfoDouble::clear_max() {
  max_ = 0;
}
inline ::google::protobuf::int32 ParameterInfoDouble::max() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.max)
  return max_;
}
inline void ParameterInfoDouble::set_max(::google::protobuf::int32 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.max)
}

// optional int32 step = 6;
inline void ParameterInfoDouble::clear_step() {
  step_ = 0;
}
inline ::google::protobuf::int32 ParameterInfoDouble::step() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.step)
  return step_;
}
inline void ParameterInfoDouble::set_step(::google::protobuf::int32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.step)
}

// optional .libspark.protocol.ParameterFlag flags = 7;
inline void ParameterInfoDouble::clear_flags() {
  flags_ = 0;
}
inline ::libspark::protocol::ParameterFlag ParameterInfoDouble::flags() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoDouble.flags)
  return static_cast< ::libspark::protocol::ParameterFlag >(flags_);
}
inline void ParameterInfoDouble::set_flags(::libspark::protocol::ParameterFlag value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoDouble.flags)
}

// -------------------------------------------------------------------

// ParameterInfoString

// optional .libspark.protocol.ParameterID id = 1;
inline void ParameterInfoString::clear_id() {
  id_ = 0;
}
inline ::libspark::protocol::ParameterID ParameterInfoString::id() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoString.id)
  return static_cast< ::libspark::protocol::ParameterID >(id_);
}
inline void ParameterInfoString::set_id(::libspark::protocol::ParameterID value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoString.id)
}

// optional string name = 2;
inline void ParameterInfoString::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParameterInfoString::name() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoString.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfoString::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoString.name)
}
inline void ParameterInfoString::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterInfoString.name)
}
inline void ParameterInfoString::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterInfoString.name)
}
inline ::std::string* ParameterInfoString::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterInfoString.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParameterInfoString::release_name() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterInfoString.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfoString::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterInfoString.name)
}

// optional string value = 3;
inline void ParameterInfoString::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParameterInfoString::value() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoString.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfoString::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoString.value)
}
inline void ParameterInfoString::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterInfoString.value)
}
inline void ParameterInfoString::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterInfoString.value)
}
inline ::std::string* ParameterInfoString::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterInfoString.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParameterInfoString::release_value() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterInfoString.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterInfoString::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterInfoString.value)
}

// optional .libspark.protocol.ParameterFlag flags = 7;
inline void ParameterInfoString::clear_flags() {
  flags_ = 0;
}
inline ::libspark::protocol::ParameterFlag ParameterInfoString::flags() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterInfoString.flags)
  return static_cast< ::libspark::protocol::ParameterFlag >(flags_);
}
inline void ParameterInfoString::set_flags(::libspark::protocol::ParameterFlag value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterInfoString.flags)
}

// -------------------------------------------------------------------

// ParameterRequest

// optional .libspark.protocol.ParameterType paramType = 1;
inline void ParameterRequest::clear_paramtype() {
  paramtype_ = 0;
}
inline ::libspark::protocol::ParameterType ParameterRequest::paramtype() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterRequest.paramType)
  return static_cast< ::libspark::protocol::ParameterType >(paramtype_);
}
inline void ParameterRequest::set_paramtype(::libspark::protocol::ParameterType value) {
  
  paramtype_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterRequest.paramType)
}

// optional .libspark.protocol.ParameterID paramID = 2;
inline void ParameterRequest::clear_paramid() {
  paramid_ = 0;
}
inline ::libspark::protocol::ParameterID ParameterRequest::paramid() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterRequest.paramID)
  return static_cast< ::libspark::protocol::ParameterID >(paramid_);
}
inline void ParameterRequest::set_paramid(::libspark::protocol::ParameterID value) {
  
  paramid_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterRequest.paramID)
}

// optional int32 paramSize = 3;
inline void ParameterRequest::clear_paramsize() {
  paramsize_ = 0;
}
inline ::google::protobuf::int32 ParameterRequest::paramsize() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterRequest.paramSize)
  return paramsize_;
}
inline void ParameterRequest::set_paramsize(::google::protobuf::int32 value) {
  
  paramsize_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterRequest.paramSize)
}

// optional bytes paramInfo = 4;
inline void ParameterRequest::clear_paraminfo() {
  paraminfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParameterRequest::paraminfo() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterRequest.paramInfo)
  return paraminfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterRequest::set_paraminfo(const ::std::string& value) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterRequest.paramInfo)
}
inline void ParameterRequest::set_paraminfo(const char* value) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterRequest.paramInfo)
}
inline void ParameterRequest::set_paraminfo(const void* value, size_t size) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterRequest.paramInfo)
}
inline ::std::string* ParameterRequest::mutable_paraminfo() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterRequest.paramInfo)
  return paraminfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParameterRequest::release_paraminfo() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterRequest.paramInfo)
  
  return paraminfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterRequest::set_allocated_paraminfo(::std::string* paraminfo) {
  if (paraminfo != NULL) {
    
  } else {
    
  }
  paraminfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paraminfo);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterRequest.paramInfo)
}

// -------------------------------------------------------------------

// ParameterResponse

// optional .libspark.protocol.ParameterResponse.ResponseCode code = 1;
inline void ParameterResponse::clear_code() {
  code_ = 0;
}
inline ::libspark::protocol::ParameterResponse_ResponseCode ParameterResponse::code() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterResponse.code)
  return static_cast< ::libspark::protocol::ParameterResponse_ResponseCode >(code_);
}
inline void ParameterResponse::set_code(::libspark::protocol::ParameterResponse_ResponseCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterResponse.code)
}

// optional string message = 2;
inline void ParameterResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParameterResponse::message() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterResponse.message)
}
inline void ParameterResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterResponse.message)
}
inline void ParameterResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterResponse.message)
}
inline ::std::string* ParameterResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParameterResponse::release_message() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterResponse.message)
}

// optional .libspark.protocol.ParameterType paramType = 3;
inline void ParameterResponse::clear_paramtype() {
  paramtype_ = 0;
}
inline ::libspark::protocol::ParameterType ParameterResponse::paramtype() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterResponse.paramType)
  return static_cast< ::libspark::protocol::ParameterType >(paramtype_);
}
inline void ParameterResponse::set_paramtype(::libspark::protocol::ParameterType value) {
  
  paramtype_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterResponse.paramType)
}

// optional int32 paramSize = 4;
inline void ParameterResponse::clear_paramsize() {
  paramsize_ = 0;
}
inline ::google::protobuf::int32 ParameterResponse::paramsize() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterResponse.paramSize)
  return paramsize_;
}
inline void ParameterResponse::set_paramsize(::google::protobuf::int32 value) {
  
  paramsize_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterResponse.paramSize)
}

// optional bytes paramInfo = 5;
inline void ParameterResponse::clear_paraminfo() {
  paraminfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ParameterResponse::paraminfo() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ParameterResponse.paramInfo)
  return paraminfo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterResponse::set_paraminfo(const ::std::string& value) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.ParameterResponse.paramInfo)
}
inline void ParameterResponse::set_paraminfo(const char* value) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.ParameterResponse.paramInfo)
}
inline void ParameterResponse::set_paraminfo(const void* value, size_t size) {
  
  paraminfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.ParameterResponse.paramInfo)
}
inline ::std::string* ParameterResponse::mutable_paraminfo() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.ParameterResponse.paramInfo)
  return paraminfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParameterResponse::release_paraminfo() {
  // @@protoc_insertion_point(field_release:libspark.protocol.ParameterResponse.paramInfo)
  
  return paraminfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParameterResponse::set_allocated_paraminfo(::std::string* paraminfo) {
  if (paraminfo != NULL) {
    
  } else {
    
  }
  paraminfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paraminfo);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.ParameterResponse.paramInfo)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace libspark

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::libspark::protocol::ParameterResponse_ResponseCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libspark::protocol::ParameterResponse_ResponseCode>() {
  return ::libspark::protocol::ParameterResponse_ResponseCode_descriptor();
}
template <> struct is_proto_enum< ::libspark::protocol::ParameterFlag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libspark::protocol::ParameterFlag>() {
  return ::libspark::protocol::ParameterFlag_descriptor();
}
template <> struct is_proto_enum< ::libspark::protocol::ParameterType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libspark::protocol::ParameterType>() {
  return ::libspark::protocol::ParameterType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_libsparkproto_2fparameters_2eproto__INCLUDED
