// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libsparkproto/parameterids.proto

#ifndef PROTOBUF_libsparkproto_2fparameterids_2eproto__INCLUDED
#define PROTOBUF_libsparkproto_2fparameterids_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace libspark {
namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_libsparkproto_2fparameterids_2eproto();
void protobuf_AssignDesc_libsparkproto_2fparameterids_2eproto();
void protobuf_ShutdownFile_libsparkproto_2fparameterids_2eproto();


enum ParameterID {
  PARAMETER_UNKNOWN = 0,
  RESOLUTION = 1,
  AUTO_EXPOSURE = 2,
  AUTO_EXPOSURE_MODE = 3,
  MANUAL_EXPOSURE = 4,
  MANUAL_GAIN = 5,
  AUTO_WB = 6,
  AUTO_WB_MODE = 7,
  MANUAL_WB = 8,
  LED_MODE = 9,
  LED_BRIGHTNESS_LEVEL = 10,
  CALIBRATION_DATA = 11,
  CAMERA_RESET = 12,
  DEVICE_INFORMATION = 13,
  ParameterID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParameterID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ParameterID_IsValid(int value);
const ParameterID ParameterID_MIN = PARAMETER_UNKNOWN;
const ParameterID ParameterID_MAX = DEVICE_INFORMATION;
const int ParameterID_ARRAYSIZE = ParameterID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParameterID_descriptor();
inline const ::std::string& ParameterID_Name(ParameterID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParameterID_descriptor(), value);
}
inline bool ParameterID_Parse(
    const ::std::string& name, ParameterID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParameterID>(
    ParameterID_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace libspark

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::libspark::protocol::ParameterID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libspark::protocol::ParameterID>() {
  return ::libspark::protocol::ParameterID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_libsparkproto_2fparameterids_2eproto__INCLUDED
