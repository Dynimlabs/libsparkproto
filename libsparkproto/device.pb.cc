// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libsparkproto/device.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libsparkproto/device.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace libspark {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* ProtocolVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscoveryMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscoveryMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_libsparkproto_2fdevice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_libsparkproto_2fdevice_2eproto() {
  protobuf_AddDesc_libsparkproto_2fdevice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "libsparkproto/device.proto");
  GOOGLE_CHECK(file != NULL);
  ProtocolVersion_descriptor_ = file->message_type(0);
  static const int ProtocolVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolVersion, major__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolVersion, minor__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolVersion, patch__),
  };
  ProtocolVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtocolVersion_descriptor_,
      ProtocolVersion::default_instance_,
      ProtocolVersion_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtocolVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolVersion, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolVersion, _is_default_instance_));
  DeviceInfoMessage_descriptor_ = file->message_type(1);
  static const int DeviceInfoMessage_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, macaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, serialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, lentype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, imutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, gnsstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, firmwareversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, ledtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, baseline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, status_),
  };
  DeviceInfoMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceInfoMessage_descriptor_,
      DeviceInfoMessage::default_instance_,
      DeviceInfoMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceInfoMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoMessage, _is_default_instance_));
  DiscoveryMessage_descriptor_ = file->message_type(2);
  static const int DiscoveryMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryMessage, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryMessage, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryMessage, firmwareversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryMessage, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryMessage, status_),
  };
  DiscoveryMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DiscoveryMessage_descriptor_,
      DiscoveryMessage::default_instance_,
      DiscoveryMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(DiscoveryMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryMessage, _is_default_instance_));
  DeviceStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_libsparkproto_2fdevice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtocolVersion_descriptor_, &ProtocolVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceInfoMessage_descriptor_, &DeviceInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DiscoveryMessage_descriptor_, &DiscoveryMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_libsparkproto_2fdevice_2eproto() {
  delete ProtocolVersion::default_instance_;
  delete ProtocolVersion_reflection_;
  delete DeviceInfoMessage::default_instance_;
  delete DeviceInfoMessage_reflection_;
  delete DiscoveryMessage::default_instance_;
  delete DiscoveryMessage_reflection_;
}

void protobuf_AddDesc_libsparkproto_2fdevice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_libsparkproto_2fdevice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032libsparkproto/device.proto\022\021libspark.p"
    "rotocol\"A\n\017ProtocolVersion\022\016\n\006major_\030\001 \001"
    "(\r\022\016\n\006minor_\030\002 \001(\r\022\016\n\006patch_\030\003 \001(\r\"\335\002\n\021D"
    "eviceInfoMessage\022\022\n\ndeviceName\030\001 \001(\t\022\022\n\n"
    "macAddress\030\002 \001(\t\022\021\n\tipAddress\030\003 \001(\t\022\021\n\ts"
    "erialNum\030\004 \001(\t\022\017\n\007lenType\030\005 \001(\t\022\017\n\007imuTy"
    "pe\030\006 \001(\t\022\020\n\010gnssType\030\007 \001(\t\022;\n\017protocolVe"
    "rsion\030\010 \001(\0132\".libspark.protocol.Protocol"
    "Version\022\027\n\017firmwareVersion\030\t \001(\t\022\017\n\007ledT"
    "ype\030\n \001(\t\022\r\n\005model\030\013 \001(\t\022\020\n\010baseline\030\014 \001"
    "(\002\022\r\n\005color\030\r \001(\010\022/\n\006status\030\016 \001(\0162\037.libs"
    "park.protocol.DeviceStatus\"\274\001\n\020Discovery"
    "Message\022\022\n\ndeviceName\030\001 \001(\t\022\r\n\005model\030\002 \001"
    "(\t\022\027\n\017firmwareVersion\030\003 \001(\t\022;\n\017protocolV"
    "ersion\030\004 \001(\0132\".libspark.protocol.Protoco"
    "lVersion\022/\n\006status\030\005 \001(\0162\037.libspark.prot"
    "ocol.DeviceStatus*F\n\014DeviceStatus\022\022\n\016DEV"
    "ICE_UNKNOWN\020\000\022\020\n\014DEVICE_READY\020\001\022\020\n\014DEVIC"
    "E_ERROR\020\002B\002H\001b\006proto3", 741);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libsparkproto/device.proto", &protobuf_RegisterTypes);
  ProtocolVersion::default_instance_ = new ProtocolVersion();
  DeviceInfoMessage::default_instance_ = new DeviceInfoMessage();
  DiscoveryMessage::default_instance_ = new DiscoveryMessage();
  ProtocolVersion::default_instance_->InitAsDefaultInstance();
  DeviceInfoMessage::default_instance_->InitAsDefaultInstance();
  DiscoveryMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_libsparkproto_2fdevice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_libsparkproto_2fdevice_2eproto {
  StaticDescriptorInitializer_libsparkproto_2fdevice_2eproto() {
    protobuf_AddDesc_libsparkproto_2fdevice_2eproto();
  }
} static_descriptor_initializer_libsparkproto_2fdevice_2eproto_;
const ::google::protobuf::EnumDescriptor* DeviceStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceStatus_descriptor_;
}
bool DeviceStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtocolVersion::kMajorFieldNumber;
const int ProtocolVersion::kMinorFieldNumber;
const int ProtocolVersion::kPatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtocolVersion::ProtocolVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libspark.protocol.ProtocolVersion)
}

void ProtocolVersion::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProtocolVersion::ProtocolVersion(const ProtocolVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libspark.protocol.ProtocolVersion)
}

void ProtocolVersion::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  major__ = 0u;
  minor__ = 0u;
  patch__ = 0u;
}

ProtocolVersion::~ProtocolVersion() {
  // @@protoc_insertion_point(destructor:libspark.protocol.ProtocolVersion)
  SharedDtor();
}

void ProtocolVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtocolVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolVersion_descriptor_;
}

const ProtocolVersion& ProtocolVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libsparkproto_2fdevice_2eproto();
  return *default_instance_;
}

ProtocolVersion* ProtocolVersion::default_instance_ = NULL;

ProtocolVersion* ProtocolVersion::New(::google::protobuf::Arena* arena) const {
  ProtocolVersion* n = new ProtocolVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtocolVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:libspark.protocol.ProtocolVersion)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProtocolVersion, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProtocolVersion*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(major__, patch__);

#undef ZR_HELPER_
#undef ZR_

}

bool ProtocolVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libspark.protocol.ProtocolVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 major_ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minor_;
        break;
      }

      // optional uint32 minor_ = 2;
      case 2: {
        if (tag == 16) {
         parse_minor_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_patch_;
        break;
      }

      // optional uint32 patch_ = 3;
      case 3: {
        if (tag == 24) {
         parse_patch_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patch__)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libspark.protocol.ProtocolVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libspark.protocol.ProtocolVersion)
  return false;
#undef DO_
}

void ProtocolVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libspark.protocol.ProtocolVersion)
  // optional uint32 major_ = 1;
  if (this->major_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major_(), output);
  }

  // optional uint32 minor_ = 2;
  if (this->minor_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor_(), output);
  }

  // optional uint32 patch_ = 3;
  if (this->patch_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->patch_(), output);
  }

  // @@protoc_insertion_point(serialize_end:libspark.protocol.ProtocolVersion)
}

::google::protobuf::uint8* ProtocolVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libspark.protocol.ProtocolVersion)
  // optional uint32 major_ = 1;
  if (this->major_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major_(), target);
  }

  // optional uint32 minor_ = 2;
  if (this->minor_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor_(), target);
  }

  // optional uint32 patch_ = 3;
  if (this->patch_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->patch_(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libspark.protocol.ProtocolVersion)
  return target;
}

int ProtocolVersion::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:libspark.protocol.ProtocolVersion)
  int total_size = 0;

  // optional uint32 major_ = 1;
  if (this->major_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major_());
  }

  // optional uint32 minor_ = 2;
  if (this->minor_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor_());
  }

  // optional uint32 patch_ = 3;
  if (this->patch_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->patch_());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libspark.protocol.ProtocolVersion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProtocolVersion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtocolVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libspark.protocol.ProtocolVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libspark.protocol.ProtocolVersion)
    MergeFrom(*source);
  }
}

void ProtocolVersion::MergeFrom(const ProtocolVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libspark.protocol.ProtocolVersion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.major_() != 0) {
    set_major_(from.major_());
  }
  if (from.minor_() != 0) {
    set_minor_(from.minor_());
  }
  if (from.patch_() != 0) {
    set_patch_(from.patch_());
  }
}

void ProtocolVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libspark.protocol.ProtocolVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolVersion::CopyFrom(const ProtocolVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libspark.protocol.ProtocolVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolVersion::IsInitialized() const {

  return true;
}

void ProtocolVersion::Swap(ProtocolVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtocolVersion::InternalSwap(ProtocolVersion* other) {
  std::swap(major__, other->major__);
  std::swap(minor__, other->minor__);
  std::swap(patch__, other->patch__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtocolVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtocolVersion_descriptor_;
  metadata.reflection = ProtocolVersion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtocolVersion

// optional uint32 major_ = 1;
void ProtocolVersion::clear_major_() {
  major__ = 0u;
}
 ::google::protobuf::uint32 ProtocolVersion::major_() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ProtocolVersion.major_)
  return major__;
}
 void ProtocolVersion::set_major_(::google::protobuf::uint32 value) {
  
  major__ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ProtocolVersion.major_)
}

// optional uint32 minor_ = 2;
void ProtocolVersion::clear_minor_() {
  minor__ = 0u;
}
 ::google::protobuf::uint32 ProtocolVersion::minor_() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ProtocolVersion.minor_)
  return minor__;
}
 void ProtocolVersion::set_minor_(::google::protobuf::uint32 value) {
  
  minor__ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ProtocolVersion.minor_)
}

// optional uint32 patch_ = 3;
void ProtocolVersion::clear_patch_() {
  patch__ = 0u;
}
 ::google::protobuf::uint32 ProtocolVersion::patch_() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.ProtocolVersion.patch_)
  return patch__;
}
 void ProtocolVersion::set_patch_(::google::protobuf::uint32 value) {
  
  patch__ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.ProtocolVersion.patch_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfoMessage::kDeviceNameFieldNumber;
const int DeviceInfoMessage::kMacAddressFieldNumber;
const int DeviceInfoMessage::kIpAddressFieldNumber;
const int DeviceInfoMessage::kSerialNumFieldNumber;
const int DeviceInfoMessage::kLenTypeFieldNumber;
const int DeviceInfoMessage::kImuTypeFieldNumber;
const int DeviceInfoMessage::kGnssTypeFieldNumber;
const int DeviceInfoMessage::kProtocolVersionFieldNumber;
const int DeviceInfoMessage::kFirmwareVersionFieldNumber;
const int DeviceInfoMessage::kLedTypeFieldNumber;
const int DeviceInfoMessage::kModelFieldNumber;
const int DeviceInfoMessage::kBaselineFieldNumber;
const int DeviceInfoMessage::kColorFieldNumber;
const int DeviceInfoMessage::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfoMessage::DeviceInfoMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libspark.protocol.DeviceInfoMessage)
}

void DeviceInfoMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  protocolversion_ = const_cast< ::libspark::protocol::ProtocolVersion*>(&::libspark::protocol::ProtocolVersion::default_instance());
}

DeviceInfoMessage::DeviceInfoMessage(const DeviceInfoMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libspark.protocol.DeviceInfoMessage)
}

void DeviceInfoMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lentype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imutype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gnsstype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolversion_ = NULL;
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ledtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baseline_ = 0;
  color_ = false;
  status_ = 0;
}

DeviceInfoMessage::~DeviceInfoMessage() {
  // @@protoc_insertion_point(destructor:libspark.protocol.DeviceInfoMessage)
  SharedDtor();
}

void DeviceInfoMessage::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lentype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imutype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gnsstype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ledtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete protocolversion_;
  }
}

void DeviceInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfoMessage_descriptor_;
}

const DeviceInfoMessage& DeviceInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libsparkproto_2fdevice_2eproto();
  return *default_instance_;
}

DeviceInfoMessage* DeviceInfoMessage::default_instance_ = NULL;

DeviceInfoMessage* DeviceInfoMessage::New(::google::protobuf::Arena* arena) const {
  DeviceInfoMessage* n = new DeviceInfoMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInfoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:libspark.protocol.DeviceInfoMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeviceInfoMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeviceInfoMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lentype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imutype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gnsstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && protocolversion_ != NULL) delete protocolversion_;
  protocolversion_ = NULL;
  ZR_(baseline_, status_);
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ledtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DeviceInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libspark.protocol.DeviceInfoMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DeviceInfoMessage.deviceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_macAddress;
        break;
      }

      // optional string macAddress = 2;
      case 2: {
        if (tag == 18) {
         parse_macAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DeviceInfoMessage.macAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ipAddress;
        break;
      }

      // optional string ipAddress = 3;
      case 3: {
        if (tag == 26) {
         parse_ipAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DeviceInfoMessage.ipAddress"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_serialNum;
        break;
      }

      // optional string serialNum = 4;
      case 4: {
        if (tag == 34) {
         parse_serialNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialnum()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serialnum().data(), this->serialnum().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DeviceInfoMessage.serialNum"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lenType;
        break;
      }

      // optional string lenType = 5;
      case 5: {
        if (tag == 42) {
         parse_lenType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lentype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lentype().data(), this->lentype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DeviceInfoMessage.lenType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imuType;
        break;
      }

      // optional string imuType = 6;
      case 6: {
        if (tag == 50) {
         parse_imuType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imutype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->imutype().data(), this->imutype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DeviceInfoMessage.imuType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gnssType;
        break;
      }

      // optional string gnssType = 7;
      case 7: {
        if (tag == 58) {
         parse_gnssType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gnsstype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gnsstype().data(), this->gnsstype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DeviceInfoMessage.gnssType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_protocolVersion;
        break;
      }

      // optional .libspark.protocol.ProtocolVersion protocolVersion = 8;
      case 8: {
        if (tag == 66) {
         parse_protocolVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protocolversion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_firmwareVersion;
        break;
      }

      // optional string firmwareVersion = 9;
      case 9: {
        if (tag == 74) {
         parse_firmwareVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmwareversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmwareversion().data(), this->firmwareversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DeviceInfoMessage.firmwareVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ledType;
        break;
      }

      // optional string ledType = 10;
      case 10: {
        if (tag == 82) {
         parse_ledType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ledtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ledtype().data(), this->ledtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DeviceInfoMessage.ledType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_model;
        break;
      }

      // optional string model = 11;
      case 11: {
        if (tag == 90) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DeviceInfoMessage.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_baseline;
        break;
      }

      // optional float baseline = 12;
      case 12: {
        if (tag == 101) {
         parse_baseline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &baseline_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_color;
        break;
      }

      // optional bool color = 13;
      case 13: {
        if (tag == 104) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &color_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_status;
        break;
      }

      // optional .libspark.protocol.DeviceStatus status = 14;
      case 14: {
        if (tag == 112) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::libspark::protocol::DeviceStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libspark.protocol.DeviceInfoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libspark.protocol.DeviceInfoMessage)
  return false;
#undef DO_
}

void DeviceInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libspark.protocol.DeviceInfoMessage)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // optional string macAddress = 2;
  if (this->macaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.macAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->macaddress(), output);
  }

  // optional string ipAddress = 3;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.ipAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ipaddress(), output);
  }

  // optional string serialNum = 4;
  if (this->serialnum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serialnum().data(), this->serialnum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.serialNum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serialnum(), output);
  }

  // optional string lenType = 5;
  if (this->lentype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lentype().data(), this->lentype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.lenType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lentype(), output);
  }

  // optional string imuType = 6;
  if (this->imutype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imutype().data(), this->imutype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.imuType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->imutype(), output);
  }

  // optional string gnssType = 7;
  if (this->gnsstype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gnsstype().data(), this->gnsstype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.gnssType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gnsstype(), output);
  }

  // optional .libspark.protocol.ProtocolVersion protocolVersion = 8;
  if (this->has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->protocolversion_, output);
  }

  // optional string firmwareVersion = 9;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), this->firmwareversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.firmwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->firmwareversion(), output);
  }

  // optional string ledType = 10;
  if (this->ledtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ledtype().data(), this->ledtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.ledType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ledtype(), output);
  }

  // optional string model = 11;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->model(), output);
  }

  // optional float baseline = 12;
  if (this->baseline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->baseline(), output);
  }

  // optional bool color = 13;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->color(), output);
  }

  // optional .libspark.protocol.DeviceStatus status = 14;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:libspark.protocol.DeviceInfoMessage)
}

::google::protobuf::uint8* DeviceInfoMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libspark.protocol.DeviceInfoMessage)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.deviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional string macAddress = 2;
  if (this->macaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.macAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->macaddress(), target);
  }

  // optional string ipAddress = 3;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.ipAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ipaddress(), target);
  }

  // optional string serialNum = 4;
  if (this->serialnum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serialnum().data(), this->serialnum().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.serialNum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->serialnum(), target);
  }

  // optional string lenType = 5;
  if (this->lentype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lentype().data(), this->lentype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.lenType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lentype(), target);
  }

  // optional string imuType = 6;
  if (this->imutype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->imutype().data(), this->imutype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.imuType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->imutype(), target);
  }

  // optional string gnssType = 7;
  if (this->gnsstype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gnsstype().data(), this->gnsstype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.gnssType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gnsstype(), target);
  }

  // optional .libspark.protocol.ProtocolVersion protocolVersion = 8;
  if (this->has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->protocolversion_, false, target);
  }

  // optional string firmwareVersion = 9;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), this->firmwareversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.firmwareVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->firmwareversion(), target);
  }

  // optional string ledType = 10;
  if (this->ledtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ledtype().data(), this->ledtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.ledType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ledtype(), target);
  }

  // optional string model = 11;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DeviceInfoMessage.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->model(), target);
  }

  // optional float baseline = 12;
  if (this->baseline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->baseline(), target);
  }

  // optional bool color = 13;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->color(), target);
  }

  // optional .libspark.protocol.DeviceStatus status = 14;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libspark.protocol.DeviceInfoMessage)
  return target;
}

int DeviceInfoMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:libspark.protocol.DeviceInfoMessage)
  int total_size = 0;

  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // optional string macAddress = 2;
  if (this->macaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->macaddress());
  }

  // optional string ipAddress = 3;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  // optional string serialNum = 4;
  if (this->serialnum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serialnum());
  }

  // optional string lenType = 5;
  if (this->lentype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lentype());
  }

  // optional string imuType = 6;
  if (this->imutype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imutype());
  }

  // optional string gnssType = 7;
  if (this->gnsstype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gnsstype());
  }

  // optional .libspark.protocol.ProtocolVersion protocolVersion = 8;
  if (this->has_protocolversion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->protocolversion_);
  }

  // optional string firmwareVersion = 9;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmwareversion());
  }

  // optional string ledType = 10;
  if (this->ledtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ledtype());
  }

  // optional string model = 11;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional float baseline = 12;
  if (this->baseline() != 0) {
    total_size += 1 + 4;
  }

  // optional bool color = 13;
  if (this->color() != 0) {
    total_size += 1 + 1;
  }

  // optional .libspark.protocol.DeviceStatus status = 14;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libspark.protocol.DeviceInfoMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceInfoMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfoMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libspark.protocol.DeviceInfoMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libspark.protocol.DeviceInfoMessage)
    MergeFrom(*source);
  }
}

void DeviceInfoMessage::MergeFrom(const DeviceInfoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libspark.protocol.DeviceInfoMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.macaddress().size() > 0) {

    macaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macaddress_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.serialnum().size() > 0) {

    serialnum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialnum_);
  }
  if (from.lentype().size() > 0) {

    lentype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lentype_);
  }
  if (from.imutype().size() > 0) {

    imutype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imutype_);
  }
  if (from.gnsstype().size() > 0) {

    gnsstype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gnsstype_);
  }
  if (from.has_protocolversion()) {
    mutable_protocolversion()->::libspark::protocol::ProtocolVersion::MergeFrom(from.protocolversion());
  }
  if (from.firmwareversion().size() > 0) {

    firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  if (from.ledtype().size() > 0) {

    ledtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ledtype_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.baseline() != 0) {
    set_baseline(from.baseline());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void DeviceInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libspark.protocol.DeviceInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoMessage::CopyFrom(const DeviceInfoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libspark.protocol.DeviceInfoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoMessage::IsInitialized() const {

  return true;
}

void DeviceInfoMessage::Swap(DeviceInfoMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfoMessage::InternalSwap(DeviceInfoMessage* other) {
  devicename_.Swap(&other->devicename_);
  macaddress_.Swap(&other->macaddress_);
  ipaddress_.Swap(&other->ipaddress_);
  serialnum_.Swap(&other->serialnum_);
  lentype_.Swap(&other->lentype_);
  imutype_.Swap(&other->imutype_);
  gnsstype_.Swap(&other->gnsstype_);
  std::swap(protocolversion_, other->protocolversion_);
  firmwareversion_.Swap(&other->firmwareversion_);
  ledtype_.Swap(&other->ledtype_);
  model_.Swap(&other->model_);
  std::swap(baseline_, other->baseline_);
  std::swap(color_, other->color_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfoMessage_descriptor_;
  metadata.reflection = DeviceInfoMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfoMessage

// optional string deviceName = 1;
void DeviceInfoMessage::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceInfoMessage::devicename() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.deviceName)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.deviceName)
}
 void DeviceInfoMessage::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DeviceInfoMessage.deviceName)
}
 void DeviceInfoMessage::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DeviceInfoMessage.deviceName)
}
 ::std::string* DeviceInfoMessage::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceInfoMessage::release_devicename() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.deviceName)
}

// optional string macAddress = 2;
void DeviceInfoMessage::clear_macaddress() {
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceInfoMessage::macaddress() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.macAddress)
  return macaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_macaddress(const ::std::string& value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.macAddress)
}
 void DeviceInfoMessage::set_macaddress(const char* value) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DeviceInfoMessage.macAddress)
}
 void DeviceInfoMessage::set_macaddress(const char* value, size_t size) {
  
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DeviceInfoMessage.macAddress)
}
 ::std::string* DeviceInfoMessage::mutable_macaddress() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.macAddress)
  return macaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceInfoMessage::release_macaddress() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.macAddress)
  
  return macaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_allocated_macaddress(::std::string* macaddress) {
  if (macaddress != NULL) {
    
  } else {
    
  }
  macaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddress);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.macAddress)
}

// optional string ipAddress = 3;
void DeviceInfoMessage::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceInfoMessage::ipaddress() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.ipAddress)
  return ipaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.ipAddress)
}
 void DeviceInfoMessage::set_ipaddress(const char* value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DeviceInfoMessage.ipAddress)
}
 void DeviceInfoMessage::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DeviceInfoMessage.ipAddress)
}
 ::std::string* DeviceInfoMessage::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.ipAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceInfoMessage::release_ipaddress() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.ipAddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.ipAddress)
}

// optional string serialNum = 4;
void DeviceInfoMessage::clear_serialnum() {
  serialnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceInfoMessage::serialnum() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.serialNum)
  return serialnum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_serialnum(const ::std::string& value) {
  
  serialnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.serialNum)
}
 void DeviceInfoMessage::set_serialnum(const char* value) {
  
  serialnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DeviceInfoMessage.serialNum)
}
 void DeviceInfoMessage::set_serialnum(const char* value, size_t size) {
  
  serialnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DeviceInfoMessage.serialNum)
}
 ::std::string* DeviceInfoMessage::mutable_serialnum() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.serialNum)
  return serialnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceInfoMessage::release_serialnum() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.serialNum)
  
  return serialnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_allocated_serialnum(::std::string* serialnum) {
  if (serialnum != NULL) {
    
  } else {
    
  }
  serialnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialnum);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.serialNum)
}

// optional string lenType = 5;
void DeviceInfoMessage::clear_lentype() {
  lentype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceInfoMessage::lentype() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.lenType)
  return lentype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_lentype(const ::std::string& value) {
  
  lentype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.lenType)
}
 void DeviceInfoMessage::set_lentype(const char* value) {
  
  lentype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DeviceInfoMessage.lenType)
}
 void DeviceInfoMessage::set_lentype(const char* value, size_t size) {
  
  lentype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DeviceInfoMessage.lenType)
}
 ::std::string* DeviceInfoMessage::mutable_lentype() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.lenType)
  return lentype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceInfoMessage::release_lentype() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.lenType)
  
  return lentype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_allocated_lentype(::std::string* lentype) {
  if (lentype != NULL) {
    
  } else {
    
  }
  lentype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lentype);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.lenType)
}

// optional string imuType = 6;
void DeviceInfoMessage::clear_imutype() {
  imutype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceInfoMessage::imutype() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.imuType)
  return imutype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_imutype(const ::std::string& value) {
  
  imutype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.imuType)
}
 void DeviceInfoMessage::set_imutype(const char* value) {
  
  imutype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DeviceInfoMessage.imuType)
}
 void DeviceInfoMessage::set_imutype(const char* value, size_t size) {
  
  imutype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DeviceInfoMessage.imuType)
}
 ::std::string* DeviceInfoMessage::mutable_imutype() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.imuType)
  return imutype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceInfoMessage::release_imutype() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.imuType)
  
  return imutype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_allocated_imutype(::std::string* imutype) {
  if (imutype != NULL) {
    
  } else {
    
  }
  imutype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imutype);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.imuType)
}

// optional string gnssType = 7;
void DeviceInfoMessage::clear_gnsstype() {
  gnsstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceInfoMessage::gnsstype() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.gnssType)
  return gnsstype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_gnsstype(const ::std::string& value) {
  
  gnsstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.gnssType)
}
 void DeviceInfoMessage::set_gnsstype(const char* value) {
  
  gnsstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DeviceInfoMessage.gnssType)
}
 void DeviceInfoMessage::set_gnsstype(const char* value, size_t size) {
  
  gnsstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DeviceInfoMessage.gnssType)
}
 ::std::string* DeviceInfoMessage::mutable_gnsstype() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.gnssType)
  return gnsstype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceInfoMessage::release_gnsstype() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.gnssType)
  
  return gnsstype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_allocated_gnsstype(::std::string* gnsstype) {
  if (gnsstype != NULL) {
    
  } else {
    
  }
  gnsstype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gnsstype);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.gnssType)
}

// optional .libspark.protocol.ProtocolVersion protocolVersion = 8;
bool DeviceInfoMessage::has_protocolversion() const {
  return !_is_default_instance_ && protocolversion_ != NULL;
}
void DeviceInfoMessage::clear_protocolversion() {
  if (GetArenaNoVirtual() == NULL && protocolversion_ != NULL) delete protocolversion_;
  protocolversion_ = NULL;
}
const ::libspark::protocol::ProtocolVersion& DeviceInfoMessage::protocolversion() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.protocolVersion)
  return protocolversion_ != NULL ? *protocolversion_ : *default_instance_->protocolversion_;
}
::libspark::protocol::ProtocolVersion* DeviceInfoMessage::mutable_protocolversion() {
  
  if (protocolversion_ == NULL) {
    protocolversion_ = new ::libspark::protocol::ProtocolVersion;
  }
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.protocolVersion)
  return protocolversion_;
}
::libspark::protocol::ProtocolVersion* DeviceInfoMessage::release_protocolversion() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.protocolVersion)
  
  ::libspark::protocol::ProtocolVersion* temp = protocolversion_;
  protocolversion_ = NULL;
  return temp;
}
void DeviceInfoMessage::set_allocated_protocolversion(::libspark::protocol::ProtocolVersion* protocolversion) {
  delete protocolversion_;
  protocolversion_ = protocolversion;
  if (protocolversion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.protocolVersion)
}

// optional string firmwareVersion = 9;
void DeviceInfoMessage::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceInfoMessage::firmwareversion() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.firmwareVersion)
  return firmwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_firmwareversion(const ::std::string& value) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.firmwareVersion)
}
 void DeviceInfoMessage::set_firmwareversion(const char* value) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DeviceInfoMessage.firmwareVersion)
}
 void DeviceInfoMessage::set_firmwareversion(const char* value, size_t size) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DeviceInfoMessage.firmwareVersion)
}
 ::std::string* DeviceInfoMessage::mutable_firmwareversion() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.firmwareVersion)
  return firmwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceInfoMessage::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.firmwareVersion)
  
  return firmwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_allocated_firmwareversion(::std::string* firmwareversion) {
  if (firmwareversion != NULL) {
    
  } else {
    
  }
  firmwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.firmwareVersion)
}

// optional string ledType = 10;
void DeviceInfoMessage::clear_ledtype() {
  ledtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceInfoMessage::ledtype() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.ledType)
  return ledtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_ledtype(const ::std::string& value) {
  
  ledtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.ledType)
}
 void DeviceInfoMessage::set_ledtype(const char* value) {
  
  ledtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DeviceInfoMessage.ledType)
}
 void DeviceInfoMessage::set_ledtype(const char* value, size_t size) {
  
  ledtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DeviceInfoMessage.ledType)
}
 ::std::string* DeviceInfoMessage::mutable_ledtype() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.ledType)
  return ledtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceInfoMessage::release_ledtype() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.ledType)
  
  return ledtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_allocated_ledtype(::std::string* ledtype) {
  if (ledtype != NULL) {
    
  } else {
    
  }
  ledtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ledtype);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.ledType)
}

// optional string model = 11;
void DeviceInfoMessage::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceInfoMessage::model() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.model)
}
 void DeviceInfoMessage::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DeviceInfoMessage.model)
}
 void DeviceInfoMessage::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DeviceInfoMessage.model)
}
 ::std::string* DeviceInfoMessage::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DeviceInfoMessage.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceInfoMessage::release_model() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DeviceInfoMessage.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceInfoMessage::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DeviceInfoMessage.model)
}

// optional float baseline = 12;
void DeviceInfoMessage::clear_baseline() {
  baseline_ = 0;
}
 float DeviceInfoMessage::baseline() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.baseline)
  return baseline_;
}
 void DeviceInfoMessage::set_baseline(float value) {
  
  baseline_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.baseline)
}

// optional bool color = 13;
void DeviceInfoMessage::clear_color() {
  color_ = false;
}
 bool DeviceInfoMessage::color() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.color)
  return color_;
}
 void DeviceInfoMessage::set_color(bool value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.color)
}

// optional .libspark.protocol.DeviceStatus status = 14;
void DeviceInfoMessage::clear_status() {
  status_ = 0;
}
 ::libspark::protocol::DeviceStatus DeviceInfoMessage::status() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DeviceInfoMessage.status)
  return static_cast< ::libspark::protocol::DeviceStatus >(status_);
}
 void DeviceInfoMessage::set_status(::libspark::protocol::DeviceStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.DeviceInfoMessage.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiscoveryMessage::kDeviceNameFieldNumber;
const int DiscoveryMessage::kModelFieldNumber;
const int DiscoveryMessage::kFirmwareVersionFieldNumber;
const int DiscoveryMessage::kProtocolVersionFieldNumber;
const int DiscoveryMessage::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiscoveryMessage::DiscoveryMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libspark.protocol.DiscoveryMessage)
}

void DiscoveryMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  protocolversion_ = const_cast< ::libspark::protocol::ProtocolVersion*>(&::libspark::protocol::ProtocolVersion::default_instance());
}

DiscoveryMessage::DiscoveryMessage(const DiscoveryMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:libspark.protocol.DiscoveryMessage)
}

void DiscoveryMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolversion_ = NULL;
  status_ = 0;
}

DiscoveryMessage::~DiscoveryMessage() {
  // @@protoc_insertion_point(destructor:libspark.protocol.DiscoveryMessage)
  SharedDtor();
}

void DiscoveryMessage::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete protocolversion_;
  }
}

void DiscoveryMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveryMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryMessage_descriptor_;
}

const DiscoveryMessage& DiscoveryMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_libsparkproto_2fdevice_2eproto();
  return *default_instance_;
}

DiscoveryMessage* DiscoveryMessage::default_instance_ = NULL;

DiscoveryMessage* DiscoveryMessage::New(::google::protobuf::Arena* arena) const {
  DiscoveryMessage* n = new DiscoveryMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiscoveryMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:libspark.protocol.DiscoveryMessage)
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && protocolversion_ != NULL) delete protocolversion_;
  protocolversion_ = NULL;
  status_ = 0;
}

bool DiscoveryMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libspark.protocol.DiscoveryMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deviceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DiscoveryMessage.deviceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // optional string model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DiscoveryMessage.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_firmwareVersion;
        break;
      }

      // optional string firmwareVersion = 3;
      case 3: {
        if (tag == 26) {
         parse_firmwareVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmwareversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmwareversion().data(), this->firmwareversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "libspark.protocol.DiscoveryMessage.firmwareVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_protocolVersion;
        break;
      }

      // optional .libspark.protocol.ProtocolVersion protocolVersion = 4;
      case 4: {
        if (tag == 34) {
         parse_protocolVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protocolversion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional .libspark.protocol.DeviceStatus status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::libspark::protocol::DeviceStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libspark.protocol.DiscoveryMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libspark.protocol.DiscoveryMessage)
  return false;
#undef DO_
}

void DiscoveryMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libspark.protocol.DiscoveryMessage)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DiscoveryMessage.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DiscoveryMessage.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // optional string firmwareVersion = 3;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), this->firmwareversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DiscoveryMessage.firmwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firmwareversion(), output);
  }

  // optional .libspark.protocol.ProtocolVersion protocolVersion = 4;
  if (this->has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->protocolversion_, output);
  }

  // optional .libspark.protocol.DeviceStatus status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:libspark.protocol.DiscoveryMessage)
}

::google::protobuf::uint8* DiscoveryMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libspark.protocol.DiscoveryMessage)
  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DiscoveryMessage.deviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DiscoveryMessage.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // optional string firmwareVersion = 3;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), this->firmwareversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "libspark.protocol.DiscoveryMessage.firmwareVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->firmwareversion(), target);
  }

  // optional .libspark.protocol.ProtocolVersion protocolVersion = 4;
  if (this->has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->protocolversion_, false, target);
  }

  // optional .libspark.protocol.DeviceStatus status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:libspark.protocol.DiscoveryMessage)
  return target;
}

int DiscoveryMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:libspark.protocol.DiscoveryMessage)
  int total_size = 0;

  // optional string deviceName = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // optional string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional string firmwareVersion = 3;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmwareversion());
  }

  // optional .libspark.protocol.ProtocolVersion protocolVersion = 4;
  if (this->has_protocolversion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->protocolversion_);
  }

  // optional .libspark.protocol.DeviceStatus status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveryMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libspark.protocol.DiscoveryMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DiscoveryMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DiscoveryMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libspark.protocol.DiscoveryMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libspark.protocol.DiscoveryMessage)
    MergeFrom(*source);
  }
}

void DiscoveryMessage::MergeFrom(const DiscoveryMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libspark.protocol.DiscoveryMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.firmwareversion().size() > 0) {

    firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  if (from.has_protocolversion()) {
    mutable_protocolversion()->::libspark::protocol::ProtocolVersion::MergeFrom(from.protocolversion());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void DiscoveryMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libspark.protocol.DiscoveryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveryMessage::CopyFrom(const DiscoveryMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libspark.protocol.DiscoveryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryMessage::IsInitialized() const {

  return true;
}

void DiscoveryMessage::Swap(DiscoveryMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiscoveryMessage::InternalSwap(DiscoveryMessage* other) {
  devicename_.Swap(&other->devicename_);
  model_.Swap(&other->model_);
  firmwareversion_.Swap(&other->firmwareversion_);
  std::swap(protocolversion_, other->protocolversion_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiscoveryMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscoveryMessage_descriptor_;
  metadata.reflection = DiscoveryMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiscoveryMessage

// optional string deviceName = 1;
void DiscoveryMessage::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DiscoveryMessage::devicename() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DiscoveryMessage.deviceName)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DiscoveryMessage::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DiscoveryMessage.deviceName)
}
 void DiscoveryMessage::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DiscoveryMessage.deviceName)
}
 void DiscoveryMessage::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DiscoveryMessage.deviceName)
}
 ::std::string* DiscoveryMessage::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DiscoveryMessage.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DiscoveryMessage::release_devicename() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DiscoveryMessage.deviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DiscoveryMessage::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DiscoveryMessage.deviceName)
}

// optional string model = 2;
void DiscoveryMessage::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DiscoveryMessage::model() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DiscoveryMessage.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DiscoveryMessage::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DiscoveryMessage.model)
}
 void DiscoveryMessage::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DiscoveryMessage.model)
}
 void DiscoveryMessage::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DiscoveryMessage.model)
}
 ::std::string* DiscoveryMessage::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DiscoveryMessage.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DiscoveryMessage::release_model() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DiscoveryMessage.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DiscoveryMessage::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DiscoveryMessage.model)
}

// optional string firmwareVersion = 3;
void DiscoveryMessage::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DiscoveryMessage::firmwareversion() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DiscoveryMessage.firmwareVersion)
  return firmwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DiscoveryMessage::set_firmwareversion(const ::std::string& value) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libspark.protocol.DiscoveryMessage.firmwareVersion)
}
 void DiscoveryMessage::set_firmwareversion(const char* value) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libspark.protocol.DiscoveryMessage.firmwareVersion)
}
 void DiscoveryMessage::set_firmwareversion(const char* value, size_t size) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libspark.protocol.DiscoveryMessage.firmwareVersion)
}
 ::std::string* DiscoveryMessage::mutable_firmwareversion() {
  
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DiscoveryMessage.firmwareVersion)
  return firmwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DiscoveryMessage::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DiscoveryMessage.firmwareVersion)
  
  return firmwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DiscoveryMessage::set_allocated_firmwareversion(::std::string* firmwareversion) {
  if (firmwareversion != NULL) {
    
  } else {
    
  }
  firmwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DiscoveryMessage.firmwareVersion)
}

// optional .libspark.protocol.ProtocolVersion protocolVersion = 4;
bool DiscoveryMessage::has_protocolversion() const {
  return !_is_default_instance_ && protocolversion_ != NULL;
}
void DiscoveryMessage::clear_protocolversion() {
  if (GetArenaNoVirtual() == NULL && protocolversion_ != NULL) delete protocolversion_;
  protocolversion_ = NULL;
}
const ::libspark::protocol::ProtocolVersion& DiscoveryMessage::protocolversion() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DiscoveryMessage.protocolVersion)
  return protocolversion_ != NULL ? *protocolversion_ : *default_instance_->protocolversion_;
}
::libspark::protocol::ProtocolVersion* DiscoveryMessage::mutable_protocolversion() {
  
  if (protocolversion_ == NULL) {
    protocolversion_ = new ::libspark::protocol::ProtocolVersion;
  }
  // @@protoc_insertion_point(field_mutable:libspark.protocol.DiscoveryMessage.protocolVersion)
  return protocolversion_;
}
::libspark::protocol::ProtocolVersion* DiscoveryMessage::release_protocolversion() {
  // @@protoc_insertion_point(field_release:libspark.protocol.DiscoveryMessage.protocolVersion)
  
  ::libspark::protocol::ProtocolVersion* temp = protocolversion_;
  protocolversion_ = NULL;
  return temp;
}
void DiscoveryMessage::set_allocated_protocolversion(::libspark::protocol::ProtocolVersion* protocolversion) {
  delete protocolversion_;
  protocolversion_ = protocolversion;
  if (protocolversion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:libspark.protocol.DiscoveryMessage.protocolVersion)
}

// optional .libspark.protocol.DeviceStatus status = 5;
void DiscoveryMessage::clear_status() {
  status_ = 0;
}
 ::libspark::protocol::DeviceStatus DiscoveryMessage::status() const {
  // @@protoc_insertion_point(field_get:libspark.protocol.DiscoveryMessage.status)
  return static_cast< ::libspark::protocol::DeviceStatus >(status_);
}
 void DiscoveryMessage::set_status(::libspark::protocol::DeviceStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:libspark.protocol.DiscoveryMessage.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace libspark

// @@protoc_insertion_point(global_scope)
